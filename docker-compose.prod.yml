version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: entrip-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-entrip}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-entrip}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-entrip} -d ${POSTGRES_DB:-entrip}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped

  # Legacy API (apps/api) - v1
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: entrip-api-prod
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-entrip}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-entrip}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 4000
      NODE_ENV: production
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4000/api/v1/health"]
      interval: 30s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # New API (packages/api) - v2
  api-v2:
    build:
      context: .
      dockerfile: packages/api/Dockerfile
    container_name: entrip-api-v2-prod
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-entrip}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-entrip}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 4002
      NODE_ENV: production
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4002/health"]
      interval: 30s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Crawler API service
  crawler:
    build:
      context: ./apps/api/src/crawler
      dockerfile: Dockerfile.simple
    container_name: entrip-crawler-prod
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./apps/api/src/crawler/korean_flight_schedules.json:/app/korean_flight_schedules.json:ro
    restart: unless-stopped

  # Web service
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: entrip-web-prod
    depends_on:
      api:
        condition: service_healthy
      api-v2:
        condition: service_healthy
      crawler:
        condition: service_healthy
    environment:
      INTERNAL_API_URL: http://api:4000
      INTERNAL_API_V2_URL: http://api-v2:4002
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
      NEXT_PUBLIC_EXCHANGE_RATE_API_KEY: ${NEXT_PUBLIC_EXCHANGE_RATE_API_KEY}
      NODE_ENV: production
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M

  # Redis service for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: entrip-redis-prod
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: entrip-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: entrip-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: entrip-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: ${POSTGRES_USER:-entrip}
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  nginx_logs:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16