name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 20
  PNPM_VERSION: 8

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build design tokens
        run: pnpm run build:tokens
        
      - name: Run linter
        run: pnpm run lint
        
      - name: Run type check
        run: pnpm run type-check

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build design tokens
        run: pnpm run build:tokens
        
      - name: Setup test database
        working-directory: apps/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
        run: |
          npx prisma migrate deploy
          npx prisma db seed
          
      - name: Run unit tests
        run: pnpm test --filter !@entrip/e2e
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build design tokens
        run: pnpm run build:tokens
        
      - name: Install Playwright browsers
        working-directory: apps/api
        run: npx playwright install chromium
        
      - name: Run E2E tests
        working-directory: apps/api
        run: pnpm run e2e
        env:
          DATABASE_URL: file:./test.db
          
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/api/playwright-report/
          retention-days: 7

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build all packages
        run: pnpm run build
        
      - name: Build Docker images
        run: |
          docker build -f apps/api/Dockerfile -t entrip-api:${{ github.sha }} .
          docker build -f apps/web/Dockerfile -t entrip-web:${{ github.sha }} .

  publish:
    name: Publish Docker Images
    needs: [build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: docker/setup-buildx-action@v3
      
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: |
            seungho88/entrip-api:nightly
            seungho88/entrip-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: |
            seungho88/entrip-web:nightly
            seungho88/entrip-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max