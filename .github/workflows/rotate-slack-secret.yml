name: Rotate Slack Webhook Secret

on:
  schedule:
    # Run every 90 days (approximately every 3 months)
    - cron: '0 9 1 */3 *'  # 9 AM UTC on 1st day of every 3rd month
  workflow_dispatch:
    inputs:
      force_rotation:
        description: 'Force secret rotation'
        required: false
        default: 'false'

jobs:
  rotate-secret:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check current secret age
      id: check_age
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the last time the secret was updated
        LAST_UPDATE=$(gh api repos/${{ github.repository }}/actions/secrets/SLACK_WEBHOOK_URL \
          --jq '.updated_at' 2>/dev/null || echo "1970-01-01T00:00:00Z")
        
        CURRENT_DATE=$(date -u +%s)
        LAST_UPDATE_DATE=$(date -d "$LAST_UPDATE" +%s)
        AGE_DAYS=$(( ($CURRENT_DATE - $LAST_UPDATE_DATE) / 86400 ))
        
        echo "Secret age: $AGE_DAYS days"
        echo "age_days=$AGE_DAYS" >> $GITHUB_OUTPUT
        
        # Check if rotation is needed (90+ days or forced)
        if [ "$AGE_DAYS" -ge 90 ] || [ "${{ github.event.inputs.force_rotation }}" = "true" ]; then
          echo "needs_rotation=true" >> $GITHUB_OUTPUT
          echo "Rotation needed: Secret is $AGE_DAYS days old"
        else
          echo "needs_rotation=false" >> $GITHUB_OUTPUT
          echo "Rotation not needed: Secret is only $AGE_DAYS days old"
        fi
        
    - name: Generate new webhook URL placeholder
      id: generate_secret
      if: steps.check_age.outputs.needs_rotation == 'true'
      run: |
        # In a real scenario, this would integrate with Slack API to create a new webhook
        # For now, we create a placeholder that requires manual update
        NEW_WEBHOOK="https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
        echo "new_webhook=$NEW_WEBHOOK" >> $GITHUB_OUTPUT
        echo "Generated placeholder webhook URL"
        
    - name: Create PR for secret rotation
      if: steps.check_age.outputs.needs_rotation == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a new branch for the secret rotation
        BRANCH_NAME="chore/rotate-slack-secret-$(date +%Y%m%d)"
        git checkout -b "$BRANCH_NAME"
        
        # Create a documentation file with rotation instructions
        cat > SECRET_ROTATION_$(date +%Y%m%d).md << EOF
        # Slack Webhook Secret Rotation
        
        **Date**: $(date -u)
        **Reason**: Scheduled 90-day rotation
        **Current Secret Age**: ${{ steps.check_age.outputs.age_days }} days
        
        ## Action Required
        
        1. Go to Slack workspace settings
        2. Navigate to Apps > Incoming Webhooks
        3. Create a new webhook for #ops-flight channel
        4. Update GitHub secret SLACK_WEBHOOK_URL with new webhook URL
        5. Test the new webhook
        6. Revoke the old webhook
        
        ## New Webhook URL Pattern
        \`\`\`
        ${{ steps.generate_secret.outputs.new_webhook }}
        \`\`\`
        
        ## Verification Commands
        
        \`\`\`bash
        # Test new webhook
        curl -X POST -H 'Content-type: application/json' \\
          --data '{"text":"🔄 Webhook rotation test - $(date)"}' \\
          \$NEW_WEBHOOK_URL
        
        # Update GitHub secret
        gh secret set SLACK_WEBHOOK_URL --body "\$NEW_WEBHOOK_URL"
        \`\`\`
        
        ## Files to Update After Secret Rotation
        
        - [ ] Test GitHub Actions workflows
        - [ ] Update Cloudflare Worker secrets
        - [ ] Update Alertmanager configuration
        - [ ] Verify monitoring alerts work
        
        ---
        🤖 This rotation was automatically generated by GitHub Actions
        EOF
        
        # Commit the rotation documentation
        git add SECRET_ROTATION_$(date +%Y%m%d).md
        git commit -m "chore: schedule Slack webhook secret rotation (90-day cycle)"
        git push origin "$BRANCH_NAME"
        
        # Create pull request
        gh pr create \\
          --title "🔄 Scheduled Slack Webhook Secret Rotation" \\
          --body "$(cat << 'EOF_BODY'
        ## 🔒 Security: Slack Webhook Secret Rotation
        
        This is an automated PR for the scheduled 90-day rotation of the Slack webhook secret.
        
        **Current secret age**: ${{ steps.check_age.outputs.age_days }} days
        **Rotation trigger**: $(if [ "${{ github.event.inputs.force_rotation }}" = "true" ]; then echo "Manual"; else echo "Scheduled (90+ days)"; fi)
        
        ### 📋 Manual Steps Required
        
        1. **Create new Slack webhook**:
           - Go to Slack App settings
           - Create new Incoming Webhook for #ops-flight
           - Copy the new webhook URL
        
        2. **Update GitHub secret**:
           \`\`\`bash
           gh secret set SLACK_WEBHOOK_URL --body "NEW_WEBHOOK_URL_HERE"
           \`\`\`
        
        3. **Update external services**:
           - Cloudflare Worker secrets
           - Alertmanager configuration
        
        4. **Test and verify**:
           - Test webhook with curl command in rotation doc
           - Trigger a test alert to verify monitoring
        
        5. **Revoke old webhook** in Slack settings
        
        ### 🔍 Verification Checklist
        
        - [ ] New webhook created in Slack
        - [ ] GitHub secret SLACK_WEBHOOK_URL updated
        - [ ] Cloudflare Worker secrets updated
        - [ ] Test alert sent successfully
        - [ ] Old webhook revoked
        - [ ] Monitoring alerts working
        
        **⚠️ Important**: Complete all steps before merging this PR
        EOF_BODY
        )" \\
          --label "security,maintenance" \\
          --assignee "${{ github.actor }}"
        
        echo "✅ Created PR for secret rotation on branch: $BRANCH_NAME"
        
    - name: Notify if no rotation needed
      if: steps.check_age.outputs.needs_rotation == 'false'
      run: |
        echo "ℹ️ Secret rotation not needed. Current age: ${{ steps.check_age.outputs.age_days }} days (threshold: 90 days)"