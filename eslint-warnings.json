[{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/__tests__/BookingModal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/__tests__/Calendar.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'bookings' is defined but never used. Allowed unused args must match /^_/u.","line":26,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'events' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[709,712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[709,712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[786,789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[786,789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\nimport { vi } from 'vitest';\nimport ReservationsPage from '../app/(main)/reservations/page';\n\n// Mock the required modules\nvi.mock('@/hooks/useBookings', () => ({\n  useBookings: () => ({\n    bookings: [\n      {\n        id: '1',\n        customerName: '테스트 고객',\n        destination: '서울',\n        departureDate: '2025-06-20',\n        returnDate: '2025-06-25',\n        numberOfPeople: 2,\n        status: 'confirmed',\n      },\n    ],\n    isLoading: false,\n    isError: false,\n    mutate: vi.fn(),\n  }),\n}));\n\nvi.mock('@entrip/ui', () => ({\n  CalendarMonth: ({ bookings }: any) => <div data-testid=\"calendar-month\">캘린더 월</div>,\n  CalendarWeek: ({ events }: any) => <div data-testid=\"calendar-week\">캘린더 주</div>,\n  DataGrid: ({ data }: any) => <div data-testid=\"data-grid\">데이터 그리드: {data.length}개 항목</div>,\n  Button: ({ children, onClick }: any) => <button onClick={onClick}>{children}</button>,\n}));\n\nvi.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: vi.fn(),\n  }),\n}));\n\ndescribe('Calendar renders', () => {\n  it('should render calendar components and reservation data', () => {\n    render(<ReservationsPage />);\n    \n    // Check if title is rendered\n    expect(screen.getByText('예약 관리')).toBeInTheDocument();\n    \n    // Check if tabs are rendered\n    expect(screen.getByText('월별 캘린더')).toBeInTheDocument();\n    expect(screen.getByText('주별 캘린더')).toBeInTheDocument();\n    expect(screen.getByText('리스트 뷰')).toBeInTheDocument();\n    \n    // Check if new booking button is rendered\n    expect(screen.getByText('+ 새 예약 등록')).toBeInTheDocument();\n    \n    // Check if calendar month is rendered by default\n    expect(screen.getByTestId('calendar-month')).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/__tests__/Login.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/__tests__/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[211,214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[211,214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[259,262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[259,262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[345,348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[345,348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: vi.fn(),\n  setItem: vi.fn(),\n  removeItem: vi.fn(),\n  clear: vi.fn(),\n};\nglobal.localStorage = localStorageMock as any;\n\n// Mock window.location\ndelete (window as any).location;\nwindow.location = { href: '', pathname: '/', search: '', hash: '' } as any;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/__tests__/layout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/accounts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/approval/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/booking/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[192,195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[192,195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[453,456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[453,456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2054,2057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2054,2057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2171,2174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2171,2174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2281,2284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2281,2284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { CalendarMonth } from '@entrip/ui'\n\n// Temporary Button component for build issues\nconst Button = ({ children, size, variant, onClick }: any) => (\n  <button\n    className={`px-4 py-2 rounded ${\n      variant === 'primary' ? 'bg-blue-500 text-white' : 'bg-gray-200'\n    } ${size === 'sm' ? 'text-sm' : ''}`}\n    onClick={onClick}\n  >\n    {children}\n  </button>\n)\n\nconst mockBookings: Record<string, any[]> = {\n  '2025-06-15': [\n    {\n      id: '1',\n      name: '김철수팀',\n      date: '2025-06-15',\n      type: 'golf',\n      typeCode: 'GF',\n      status: 'CONFIRMED',\n      paxCount: 4,\n      time: '09:00',\n      details: '발리 골프 투어',\n      manager: '김담당',\n    },\n  ],\n  '2025-06-18': [\n    {\n      id: '2',\n      name: '이영희팀',\n      date: '2025-06-18',\n      type: 'incentive',\n      typeCode: 'IN',\n      status: 'PENDING',\n      paxCount: 20,\n      time: '14:00',\n      details: '태국 인센티브 투어',\n      manager: '이담당',\n    },\n  ],\n}\n\nexport default function BookingPage() {\n  const [viewMode, setViewMode] = useState<'calendar' | 'list'>('calendar')\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-900\">예약 관리</h1>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\n            <Button\n              size=\"sm\"\n              variant={viewMode === 'calendar' ? 'primary' : 'ghost'}\n              onClick={() => setViewMode('calendar')}\n            >\n              캘린더\n            </Button>\n            <Button\n              size=\"sm\"\n              variant={viewMode === 'list' ? 'primary' : 'ghost'}\n              onClick={() => setViewMode('list')}\n            >\n              리스트\n            </Button>\n          </div>\n          <Button variant=\"primary\">\n            + 예약 등록\n          </Button>\n        </div>\n      </div>\n\n      {viewMode === 'calendar' ? (\n        <CalendarMonth \n          bookings={mockBookings}\n          onAddBooking={(_date: any) => {\n            // TODO: Implement add booking functionality\n          }}\n          onBookingClick={(_booking: any) => {\n            // TODO: Implement booking click handler\n          }}\n          onMonthChange={(_month: any) => {\n            // TODO: Implement month change handler\n          }}\n          className=\"\"\n        />\n      ) : (\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n          <p className=\"text-gray-500\">리스트 뷰 - 구현 예정</p>\n          {/* TODO: DataGrid 컴포넌트 활용한 리스트 뷰 */}\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/calendar-performance/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/chat/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/flow/FlowCanvas.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/flow/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/mail/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/reservations/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[266,269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[266,269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[650,653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[650,653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[750,753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[750,753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[817,820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[817,820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5477,5480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5477,5480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { CalendarMonth, DataGrid, StatusTag, Button } from '@entrip/ui'\n// import BookingModal from '@/components/BookingModal'\nconst BookingModal = (_props: { isOpen: boolean; onClose: () => void; booking?: any; onSave?: () => void }) => null\n// import WeekView from '@/features/calendar/WeekView'\n// import WeekViewMobile from '@/features/calendar/WeekViewMobile'\n// import CalendarVirtual from '@/features/calendar/CalendarVirtual'\n// import BulkActionBar from '@/components/BulkActionBar'\nconst WeekView = (_props: { currentDate: Date }) => null\nconst WeekViewMobile = (_props: { events: any[]; currentDate: Date }) => null\nconst CalendarVirtual = (_props: { currentDate: Date; bookings: any[]; onDayClick: (date: Date) => void; onBookingClick: (booking: any) => void }) => null\nconst BulkActionBar = (_props: { selectedCount: number; onAction: (action: string) => void; onClose: () => void }) => null\nimport { clsx } from 'clsx'\nimport type { BookingEvent } from '@entrip/shared'\nimport { logger } from '@entrip/shared'\n// import { useBookings } from '@/hooks/useBookings'\n// import { exportToExcel, exportToPDF } from '@/utils/export'\n// import { parseCSV, downloadCSVTemplate } from '@/utils/csv-import'\n// import axiosInstance from '@/lib/axios'\n// Removed duplicate interface - using the one below\n\nconst useBookings = () => ({ bookings: [] as Booking[], error: null, isLoading: false, mutate: () => {} })\nconst exportToExcel = (_data: Booking[], _filename: string) => {}\nconst exportToPDF = (_data: Booking[], _filename: string) => {}\nconst parseCSV = async (_file: File) => [] as Booking[]\nconst downloadCSVTemplate = () => {}\nconst axiosInstance = { post: async (_url: string, _data: { bookings: Booking[] }) => ({ status: 200, data: { success: true, created: 0 } }) }\n\n// CalendarEvent type from CalendarWeek component\ninterface CalendarEvent {\n  id: string;\n  date: string;\n  title: string;\n  type: 'golf' | 'incentive' | 'honeymoon' | 'airtel' | 'other';\n  status: 'confirmed' | 'pending' | 'cancelled';\n  time?: string;\n  details?: string;\n}\n\ninterface Booking {\n  id: string\n  bookingNumber?: string\n  customerName: string\n  teamName?: string\n  date?: string\n  departureDate: string\n  returnDate?: string\n  destination: string\n  nights?: number\n  paxCount?: number\n  totalPax: number\n  revenue: number\n  status: 'pending' | 'confirmed' | 'cancelled' | 'completed'\n  totalPrice?: number\n  coordinator?: string\n  numberOfPeople?: number\n  [key: string]: unknown\n}\n\nexport default function ReservationsPage() {\n  const [activeTab, setActiveTab] = useState<'calendar-month' | 'calendar-week' | 'list' | 'calendar-virtual'>('calendar-month')\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [selectedBooking, setSelectedBooking] = useState<Booking | null>(null)\n  const [currentDate] = useState(new Date(2025, 5)) // 2025년 6월\n  const [selectedIds, setSelectedIds] = useState<string[]>([])\n  const [isMobile, setIsMobile] = useState(false)\n  \n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768)\n    }\n    checkMobile()\n    window.addEventListener('resize', checkMobile)\n    return () => window.removeEventListener('resize', checkMobile)\n  }, [])\n\n  // 실제 API에서 데이터 가져오기\n  const { bookings, isLoading, mutate } = useBookings()\n\n  // API 데이터를 CalendarEvent 형식으로 변환\n  const _events: CalendarEvent[] = bookings.map(booking => ({\n    id: booking.id || '',\n    date: booking.departureDate || '',\n    title: booking.customerName || '',\n    type: 'other' as const, // TODO: Add type field to booking\n    status: booking.status === 'confirmed' ? 'confirmed' : booking.status === 'cancelled' ? 'cancelled' : 'pending',\n    time: '09:00',\n    details: `${booking.destination} - ${booking.numberOfPeople}명`,\n  }))\n\n  // API 데이터를 리스트 형식으로 변환\n  const displayBookings: Booking[] = bookings.map((booking, index) => ({\n    id: booking.id || '',\n    bookingNumber: `B2025-${String(index + 1).padStart(3, '0')}`,\n    customerName: booking.customerName || '',\n    teamName: booking.customerName || '',\n    date: booking.departureDate || '',\n    departureDate: booking.departureDate || '',\n    returnDate: booking.returnDate || '',\n    destination: booking.destination || '',\n    nights: 3, // TODO: Calculate from dates\n    paxCount: booking.numberOfPeople || 0,\n    revenue: 0, // TODO: Add price field to booking\n    status: (booking.status?.toLowerCase() || 'pending') as 'pending' | 'confirmed' | 'cancelled' | 'completed',\n    totalPrice: 0,\n    type: '기타',\n    origin: '인천',\n    startDate: booking.departureDate || '',\n    endDate: booking.returnDate || '',\n    totalPax: booking.numberOfPeople || 0,\n    coordinator: '담당자',\n  }))\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedIds(displayBookings.map(b => b.id));\n    } else {\n      setSelectedIds([]);\n    }\n  };\n\n  const handleSelectOne = (id: string, checked: boolean) => {\n    if (checked) {\n      setSelectedIds([...selectedIds, id]);\n    } else {\n      setSelectedIds(selectedIds.filter(sid => sid !== id));\n    }\n  };\n\n  const columns = [\n    {\n      key: 'select',\n      header: (\n        <input\n          type=\"checkbox\"\n          checked={displayBookings.length > 0 && selectedIds.length === displayBookings.length}\n          onChange={(e) => handleSelectAll(e.target.checked)}\n          className=\"rounded\"\n        />\n      ),\n      width: 50,\n      render: (_: any, row: Booking) => (\n        <input\n          type=\"checkbox\"\n          checked={selectedIds.includes(row.id)}\n          onChange={(e) => handleSelectOne(row.id, e.target.checked)}\n          className=\"rounded\"\n        />\n      ),\n    },\n    { key: 'teamName', header: '팀명', width: 200 },\n    { key: 'type', header: '유형', width: 100 },\n    { key: 'destination', header: '목적지', width: 100 },\n    { key: 'startDate', header: '출발일', width: 120 },\n    { key: 'endDate', header: '도착일', width: 120 },\n    { \n      key: 'status', \n      header: '상태', \n      width: 100,\n      render: (value: string) => <StatusTag status={value as 'pending' | 'confirmed' | 'cancelled' | 'completed'} size=\"sm\" className=\"\" />\n    },\n    { key: 'totalPax', header: '인원', width: 80 },\n    { \n      key: 'revenue', \n      header: '매출', \n      width: 120,\n      render: (value: number) => `${value.toLocaleString()}원`\n    },\n    { key: 'coordinator', header: '담당자', width: 100 },\n  ]\n\n  const handleBookingEventClick = (event: BookingEvent) => {\n    const booking = displayBookings.find(b => b.customerName === event.title)\n    if (booking) {\n      setSelectedBooking(booking)\n      setIsModalOpen(true)\n    }\n  }\n\n  const _handleCalendarEventClick = (event: CalendarEvent) => {\n    const booking = displayBookings.find(b => b.customerName === event.title)\n    if (booking) {\n      setSelectedBooking(booking)\n      setIsModalOpen(true)\n    }\n  }\n\n  const _handleRowClick = (row: Booking) => {\n    setSelectedBooking(row)\n    setIsModalOpen(true)\n  }\n\n  const handleNewBooking = () => {\n    setSelectedBooking(null)\n    setIsModalOpen(true)\n  }\n\n  const handleExport = (type: 'excel' | 'pdf') => {\n    const exportData = bookings.map((booking) => ({\n      id: booking.id || '',\n      bookingNumber: booking.bookingNumber || '',\n      customerName: booking.customerName || '',\n      teamName: booking.customerName || '',\n      destination: booking.destination || '',\n      departureDate: booking.departureDate || '',\n      returnDate: booking.returnDate || '',\n      numberOfPeople: booking.numberOfPeople || 0,\n      totalPax: booking.totalPax || booking.numberOfPeople || 0,\n      status: (booking.status || 'pending') as 'pending' | 'confirmed' | 'cancelled' | 'completed',\n      revenue: 0,\n      coordinator: '담당자'\n    }));\n\n    if (type === 'excel') {\n      exportToExcel(exportData, 'entrip_bookings');\n    } else {\n      exportToPDF(exportData, 'entrip_bookings');\n    }\n  }\n\n  const handleCSVImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    try {\n      const csvBookings = await parseCSV(file);\n      logger.info('CSV data imported', 'count:', csvBookings.length);\n      \n      // API로 bulk upload\n      const response = await axiosInstance.post('/api/bookings/bulk-upload', {\n        bookings: csvBookings\n      });\n      \n      if (response.status === 200) {\n        logger.info('Bookings created successfully', 'created:', response.data.created);\n        // SWR 캐시 갱신\n        mutate();\n      }\n    } catch (error) {\n      logger.error('CSV Import failed:', error instanceof Error ? error.message : String(error));\n      alert('CSV 파일 업로드에 실패했습니다.');\n    }\n    \n    // 파일 입력 초기화\n    event.target.value = '';\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-gray-500\">데이터를 불러오는 중...</div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6 flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold mb-2\">예약 관리</h1>\n          <p className=\"text-gray-600\">예약 현황을 캘린더와 리스트로 확인하세요.</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <div className=\"relative\">\n            <Button \n              variant=\"secondary\" \n              onClick={() => {\n                const dropdown = document.getElementById('export-dropdown');\n                if (dropdown) {\n                  dropdown.classList.toggle('hidden');\n                }\n              }}\n            >\n              Export ▼\n            </Button>\n            <div \n              id=\"export-dropdown\"\n              className=\"hidden absolute right-0 mt-2 w-48 bg-white border rounded-lg shadow-lg z-10\"\n            >\n              <button\n                className=\"block w-full text-left px-4 py-2 hover:bg-gray-100\"\n                onClick={() => {\n                  handleExport('excel');\n                  document.getElementById('export-dropdown')?.classList.add('hidden');\n                }}\n              >\n                📊 Excel로 내보내기\n              </button>\n              <button\n                className=\"block w-full text-left px-4 py-2 hover:bg-gray-100\"\n                onClick={() => {\n                  handleExport('pdf');\n                  document.getElementById('export-dropdown')?.classList.add('hidden');\n                }}\n              >\n                📄 PDF로 내보내기\n              </button>\n              <hr className=\"my-1\" />\n              <button\n                className=\"block w-full text-left px-4 py-2 hover:bg-gray-100\"\n                onClick={() => {\n                  downloadCSVTemplate();\n                  document.getElementById('export-dropdown')?.classList.add('hidden');\n                }}\n              >\n                📝 CSV 템플릿 다운로드\n              </button>\n            </div>\n          </div>\n          \n          {/* CSV Import */}\n          <div className=\"relative\">\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              onChange={handleCSVImport}\n              className=\"hidden\"\n              id=\"csv-import\"\n            />\n            <Button \n              variant=\"secondary\"\n              onClick={() => document.getElementById('csv-import')?.click()}\n            >\n              📥 CSV Import\n            </Button>\n          </div>\n          \n          <Button variant=\"primary\" onClick={handleNewBooking}>\n            + 새 예약 등록\n          </Button>\n        </div>\n      </div>\n\n      {/* 탭 네비게이션 */}\n      <div className=\"border-b border-gray-200 mb-6\">\n        <nav className=\"-mb-px flex space-x-8\">\n          <button\n            onClick={() => setActiveTab('calendar-month')}\n            className={clsx(\n              'py-2 px-1 border-b-2 font-medium text-sm transition-colors',\n              activeTab === 'calendar-month'\n                ? 'border-blue-500 text-brand-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            )}\n          >\n            월별 캘린더\n          </button>\n          <button\n            onClick={() => setActiveTab('calendar-week')}\n            className={clsx(\n              'py-2 px-1 border-b-2 font-medium text-sm transition-colors',\n              activeTab === 'calendar-week'\n                ? 'border-blue-500 text-brand-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            )}\n          >\n            주별 캘린더\n          </button>\n          <button\n            onClick={() => setActiveTab('list')}\n            className={clsx(\n              'py-2 px-1 border-b-2 font-medium text-sm transition-colors',\n              activeTab === 'list'\n                ? 'border-blue-500 text-brand-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            )}\n          >\n            리스트 뷰\n          </button>\n          <button\n            onClick={() => setActiveTab('calendar-virtual')}\n            className={clsx(\n              'py-2 px-1 border-b-2 font-medium text-sm transition-colors',\n              activeTab === 'calendar-virtual'\n                ? 'border-blue-500 text-brand-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            )}\n          >\n            가상 스크롤 캘린더\n          </button>\n        </nav>\n      </div>\n\n      {/* 탭 컨텐츠 */}\n      <div>\n        {activeTab === 'calendar-month' ? (\n          <div>\n            <CalendarMonth\n              month={currentDate}\n              bookings={{}}\n              onAddBooking={(_date: Date) => {\n                // TODO: Open booking modal for date\n              }}\n              onBookingClick={handleBookingEventClick}\n              onMonthChange={(_month: Date) => {\n                // TODO: Handle month change\n              }}\n              className=\"\"\n            />\n          </div>\n        ) : activeTab === 'calendar-week' ? (\n          <div className=\"h-[600px]\">\n            {isMobile ? (\n              <WeekViewMobile events={_events} currentDate={currentDate} />\n            ) : (\n              <WeekView currentDate={currentDate} />\n            )}\n          </div>\n        ) : activeTab === 'calendar-virtual' ? (\n          <div>\n            <CalendarVirtual\n              currentDate={currentDate}\n              bookings={bookings}\n              onDayClick={(date: Date) => {\n                logger.info('Day clicked', date.toISOString());\n                // 날짜 클릭 시 새 예약 생성 가능\n                setIsModalOpen(true);\n              }}\n              onBookingClick={(booking: Booking) => {\n                const displayBooking = displayBookings.find(b => b.customerName === booking.customerName);\n                if (displayBooking) {\n                  setSelectedBooking(displayBooking);\n                  setIsModalOpen(true);\n                }\n              }}\n            />\n          </div>\n        ) : (\n          <div>\n            <DataGrid\n              columns={columns}\n              data={displayBookings}\n              className=\"\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* 예약 편집 모달 */}\n      <BookingModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false)\n          setSelectedBooking(null)\n        }}\n        booking={selectedBooking}\n        onSave={() => {\n          setIsModalOpen(false)\n          setSelectedBooking(null)\n        }}\n      />\n      \n      <BulkActionBar \n        selectedCount={selectedIds.length}\n        onAction={(action: string) => {\n          logger.info('Bulk action:', `${action} on ${selectedIds.length} items`);\n          // TODO: Implement bulk actions\n        }}\n        onClose={() => setSelectedIds([])}\n      />\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/stats/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/(main)/workspace/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/api/exchange/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/login/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/e2e/booking-flow.spec.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1863,1923],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\ntest.describe('Booking Flow', () => {\n  test('should login, create booking, view in calendar, and bulk delete', async ({ page }) => {\n    // 1. 로그인\n    await page.goto('/login');\n    \n    await page.fill('input[type=\"email\"]', 'admin@entrip.com');\n    await page.fill('input[type=\"password\"]', 'admin123');\n    await page.click('button[type=\"submit\"]');\n    \n    // 로그인 성공 후 예약 페이지로 리다이렉트 확인\n    await expect(page).toHaveURL('/reservations');\n    \n    // 2. 새 예약 등록\n    await page.click('text=새 예약 등록');\n    \n    // 모달이 열리는지 확인\n    await expect(page.locator('text=새 예약')).toBeVisible();\n    \n    // 폼 입력\n    await page.fill('input[name=\"customerName\"]', 'E2E 테스트 고객');\n    await page.fill('input[name=\"phoneNumber\"]', '010-1234-5678');\n    await page.fill('input[name=\"destination\"]', '제주도');\n    await page.fill('input[name=\"departureDate\"]', '2025-07-01');\n    await page.fill('input[name=\"returnDate\"]', '2025-07-05');\n    await page.fill('input[name=\"numberOfPeople\"]', '2');\n    \n    // 저장\n    await page.click('button:has-text(\"저장\")');\n    \n    // 모달이 닫히는지 확인\n    await expect(page.locator('text=새 예약')).not.toBeVisible();\n    \n    // 3. 리스트 뷰에서 확인\n    await page.click('text=리스트 뷰');\n    \n    // 새로 추가된 예약이 표시되는지 확인\n    await expect(page.locator('text=E2E 테스트 고객')).toBeVisible();\n    \n    // 4. 체크박스 선택\n    const checkboxes = page.locator('input[type=\"checkbox\"]');\n    const firstCheckbox = checkboxes.nth(1); // 헤더 체크박스 제외하고 첫 번째\n    await firstCheckbox.check();\n    \n    // Bulk 액션 바가 나타나는지 확인\n    await expect(page.locator('text=1개 선택됨')).toBeVisible();\n    \n    // 5. Bulk 삭제\n    await page.click('text=선택 삭제');\n    \n    // 확인 다이얼로그 처리\n    page.on('dialog', dialog => dialog.accept());\n    \n    // 삭제 완료 확인 - Bulk 액션 바가 사라져야 함\n    await expect(page.locator('text=개 선택됨')).not.toBeVisible();\n    \n    console.log('✓ E2E 테스트 완료: 로그인 → 예약 생성 → 캘린더 확인 → Bulk 삭제');\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/e2e/csv-undo.spec.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1146,1190],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2382,2419],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ntest('CSV upload -> calendar display -> Undo 시나리오', async ({ page }) => {\n  // 1. 로그인\n  await page.goto('/login');\n  \n  await page.fill('input[type=\"email\"]', 'admin@entrip.com');\n  await page.fill('input[type=\"password\"]', 'admin123');\n  await page.click('button[type=\"submit\"]');\n  \n  await expect(page).toHaveURL('/reservations');\n  \n  // 2. 테스트용 CSV 파일 생성\n  const csvContent = `고객명,전화번호,목적지,출발일,도착일,인원,상태\n김철수,010-1111-2222,제주도,2025-08-01,2025-08-05,2,pending\n이영희,010-3333-4444,부산,2025-08-10,2025-08-12,4,confirmed\n박민수,010-5555-6666,강릉,2025-08-15,2025-08-17,3,pending\n최지현,010-7777-8888,여수,2025-08-20,2025-08-23,2,confirmed\n정태우,010-9999-0000,경주,2025-08-25,2025-08-28,5,pending`;\n\n  const csvPath = path.join(process.cwd(), 'test-bookings.csv');\n  fs.writeFileSync(csvPath, csvContent, 'utf8');\n  \n  // 3. CSV Import 버튼 클릭 및 파일 업로드\n  const fileInput = page.locator('input#csv-import');\n  await fileInput.setInputFiles(csvPath);\n  \n  // 업로드 성공 확인 (콘솔 로그)\n  page.on('console', msg => {\n    if (msg.text().includes('개의 예약이 생성되었습니다')) {\n      console.log('✅ CSV Upload 성공:', msg.text());\n    }\n  });\n  \n  await page.waitForTimeout(2000);\n  \n  // 4. 캘린더에서 새 예약 확인\n  await page.click('text=주별 캘린더');\n  await page.waitForTimeout(1000);\n  \n  // 김철수 예약이 표시되는지 확인\n  const kimBooking = await page.locator('text=김철수').isVisible();\n  expect(kimBooking).toBeTruthy();\n  \n  // 5. 리스트 뷰로 전환\n  await page.click('text=리스트 뷰');\n  await page.waitForTimeout(1000);\n  \n  // 6. 전체 선택\n  const selectAllCheckbox = page.locator('input[type=\"checkbox\"]').first();\n  await selectAllCheckbox.click();\n  \n  // Bulk Action Bar가 나타나는지 확인\n  await expect(page.locator('text=개 선택됨')).toBeVisible();\n  \n  // 7. Bulk 삭제 실행\n  await page.click('text=선택 삭제');\n  \n  // 8. Undo 토스트 확인\n  const undoToast = page.locator('text=개 항목이 삭제되었습니다');\n  await expect(undoToast).toBeVisible({ timeout: 5000 });\n  \n  // 9. Undo 버튼 클릭\n  await page.click('text=실행 취소');\n  \n  // 10. 복원 성공 메시지 확인\n  const restoreToast = page.locator('text=개 항목이 복원되었습니다');\n  await expect(restoreToast).toBeVisible({ timeout: 5000 });\n  \n  // 11. 복원된 데이터 확인\n  await page.waitForTimeout(2000);\n  const restoredBooking = await page.locator('text=김철수').isVisible();\n  expect(restoredBooking).toBeTruthy();\n  \n  // 테스트 파일 정리\n  fs.unlinkSync(csvPath);\n  \n  console.log('✅ CSV-Undo E2E 테스트 완료');\n});","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/e2e/mobile-export.spec.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2398,2440],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\ntest('모바일 환경에서 예약 목록 Export 기능 테스트', async ({ page }) => {\n  // 모바일 viewport 설정\n  await page.setViewportSize({ width: 375, height: 812 });\n    // 1. 로그인\n    await page.goto('/login');\n    \n    await page.fill('input[type=\"email\"]', 'admin@entrip.com');\n    await page.fill('input[type=\"password\"]', 'admin123');\n    await page.click('button[type=\"submit\"]');\n    \n    await expect(page).toHaveURL('/reservations');\n    \n    // 2. 모바일에서 주간 캘린더 확인\n    await page.click('text=주별 캘린더');\n    await page.waitForTimeout(1000);\n    \n    // WeekViewMobile 컴포넌트가 렌더링되었는지 확인\n    const mobileCalendar = await page.locator('.snap-x').isVisible();\n    expect(mobileCalendar).toBeTruthy();\n    \n    // 3. Export 드롭다운 열기\n    await page.click('text=Export');\n    \n    // 드롭다운 메뉴가 보이는지 확인\n    const dropdown = page.locator('#export-dropdown');\n    await expect(dropdown).toBeVisible();\n    \n    // 4. Excel Export 클릭 (실제 다운로드는 테스트 환경에서 제한될 수 있음)\n    const [downloadExcel] = await Promise.all([\n      page.waitForEvent('download', { timeout: 5000 }).catch(() => null),\n      page.click('text=Excel로 내보내기')\n    ]);\n    \n    if (downloadExcel) {\n      // 다운로드된 파일명 확인\n      const filename = downloadExcel.suggestedFilename();\n      expect(filename).toContain('entrip_bookings');\n      expect(filename).toContain('.xlsx');\n    }\n    \n    // 5. 다시 Export 드롭다운 열기 (dropdown이 닫혔을 수 있음)\n    await page.click('text=Export');\n    \n    // 6. PDF Export 클릭\n    const [downloadPDF] = await Promise.all([\n      page.waitForEvent('download', { timeout: 5000 }).catch(() => null),\n      page.click('text=PDF로 내보내기')\n    ]);\n    \n    if (downloadPDF) {\n      // 다운로드된 파일명 확인\n      const filename = downloadPDF.suggestedFilename();\n      expect(filename).toContain('entrip_bookings');\n      expect(filename).toContain('.pdf');\n    }\n    \n    // 7. 가상 스크롤 캘린더 테스트\n    await page.click('text=가상 스크롤 캘린더');\n    await page.waitForTimeout(1000);\n    \n    // 가상 스크롤 컨테이너가 렌더링되었는지 확인\n    const virtualCalendar = await page.locator('[style*=\"overflow: hidden\"]').isVisible();\n    expect(virtualCalendar).toBeTruthy();\n    \n    // 스크롤 테스트\n    await page.evaluate(() => {\n      const scrollContainer = document.querySelector('[style*=\"overflow: hidden\"]');\n      if (scrollContainer) {\n        scrollContainer.scrollTop += 200;\n      }\n    });\n    \n    await page.waitForTimeout(500);\n    \n    console.log('✅ 모바일 Export 기능 E2E 테스트 완료');\n});","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/jest.setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/AirlineLogo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/BookingModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1922,1925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1922,1925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2040,2043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2040,2043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { X } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useBookings, createBooking, updateBooking } from '../hooks/useBookings';\nimport type { Booking } from '@entrip/shared';\nimport { logger, BookingType, BookingStatus } from '@entrip/shared';\nimport { bookingSchema, BookingFormData } from './BookingModalSchema';\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  booking?: Booking | null;\n  onSave?: () => void;\n}\n\nexport default function BookingModal({ isOpen, onClose, booking, onSave }: BookingModalProps) {\n  const { mutate } = useBookings();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      customerName: booking?.customerName || '',\n      phoneNumber: '', // Not available in Booking type\n      email: '', // Not available in Booking type\n      destination: booking?.destination || '',\n      departureDate: booking?.startDate || '',\n      returnDate: booking?.endDate || '',\n      numberOfPeople: booking?.paxCount || 1,\n      status: (booking?.status?.toLowerCase() || 'pending') as 'pending' | 'confirmed' | 'cancelled',\n      notes: booking?.notes || '',\n    },\n  });\n\n  if (!isOpen) return null;\n\n  const onSubmit = async (formData: BookingFormData) => {\n    setLoading(true);\n    setError('');\n\n    // Optimistic update\n    const optimisticBooking = {\n      id: booking?.id || `temp-${Date.now()}`,\n      ...formData,\n      createdAt: booking?.createdAt || new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    try {\n      // Optimistically update the cache\n      await mutate(\n        async (currentData: any) => {\n          if (booking?.id) {\n            // Update existing booking\n            return currentData?.map((b: any) =>\n              b.id === booking.id ? optimisticBooking : b\n            );\n          } else {\n            // Add new booking\n            return [...(currentData || []), optimisticBooking];\n          }\n        },\n        {\n          revalidate: false, // Don't revalidate immediately\n        }\n      );\n\n      // Map form data to API format\n      const apiData = {\n        customerName: formData.customerName,\n        destination: formData.destination,\n        startDate: formData.departureDate,\n        endDate: formData.returnDate,\n        paxCount: formData.numberOfPeople,\n        status: BookingStatus[formData.status.toUpperCase() as keyof typeof BookingStatus],\n        notes: formData.notes,\n        // These fields are required by the API but not in the form\n        teamName: formData.customerName, // Using customer name as team name\n        bookingType: BookingType.PACKAGE,\n        nights: Math.ceil((new Date(formData.returnDate).getTime() - new Date(formData.departureDate).getTime()) / (1000 * 60 * 60 * 24)),\n        days: Math.ceil((new Date(formData.returnDate).getTime() - new Date(formData.departureDate).getTime()) / (1000 * 60 * 60 * 24)) + 1,\n        totalPrice: 0, // Would need to be calculated or input\n        currency: 'KRW',\n      };\n\n      // Make the actual API call\n      if (booking?.id) {\n        await updateBooking(booking.id, apiData);\n      } else {\n        await createBooking(apiData);\n      }\n\n      // Revalidate to get the real data from server\n      await mutate();\n      \n      onSave?.();\n      onClose();\n    } catch (err) {\n      // Rollback on error by revalidating\n      await mutate();\n      setError('예약 처리 중 오류가 발생했습니다.');\n      logger.error('Booking error:', err instanceof Error ? err.message : String(err));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">\n            {booking ? '예약 수정' : '새 예약'}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">\n            {error}\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label htmlFor=\"customerName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                고객명 *\n              </label>\n              <input\n                id=\"customerName\"\n                type=\"text\"\n                {...register('customerName')}\n                className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n              />\n              {errors.customerName && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.customerName.message}</p>\n              )}\n            </div>\n            <div>\n              <label htmlFor=\"phoneNumber\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                연락처 *\n              </label>\n              <input\n                id=\"phoneNumber\"\n                type=\"tel\"\n                {...register('phoneNumber')}\n                className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n              />\n              {errors.phoneNumber && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.phoneNumber.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              이메일\n            </label>\n            <input\n              type=\"email\"\n              {...register('email')}\n              className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n            />\n            {errors.email && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              여행지 *\n            </label>\n            <input\n              type=\"text\"\n              {...register('destination')}\n              className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n            />\n            {errors.destination && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.destination.message}</p>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                출발일 *\n              </label>\n              <input\n                type=\"date\"\n                {...register('departureDate')}\n                className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n              />\n              {errors.departureDate && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.departureDate.message}</p>\n              )}\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                귀국일 *\n              </label>\n              <input\n                type=\"date\"\n                {...register('returnDate')}\n                className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n              />\n              {errors.returnDate && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.returnDate.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                인원 *\n              </label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                {...register('numberOfPeople', { valueAsNumber: true })}\n                className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n              />\n              {errors.numberOfPeople && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.numberOfPeople.message}</p>\n              )}\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                상태\n              </label>\n              <select\n                {...register('status')}\n                className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"pending\">대기중</option>\n                <option value=\"confirmed\">확정</option>\n                <option value=\"cancelled\">취소</option>\n              </select>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              메모\n            </label>\n            <textarea\n              {...register('notes')}\n              rows={3}\n              className=\"w-full p-2 border rounded focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded hover:bg-gray-200\"\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"px-4 py-2 text-white bg-blue-500 rounded hover:bg-blue-600 disabled:opacity-50\"\n            >\n              {loading ? '처리중...' : booking ? '수정' : '저장'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/BookingModalSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/BulkActionBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1051,1054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1051,1054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Trash2, X } from 'lucide-react';\nimport axiosInstance from '../lib/axios';\nimport { useBookings } from '../hooks/useBookings';\nimport { useBulkUndo } from '../hooks/useBulkUndo';\nimport { toast } from 'react-toastify';\nimport { logger } from '@entrip/shared';\n\ninterface BulkActionBarProps {\n  selectedIds: string[];\n  onClearSelection: () => void;\n}\n\nexport default function BulkActionBar({ selectedIds, onClearSelection }: BulkActionBarProps) {\n  const { bookings, mutate } = useBookings();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const { addUndoItem } = useBulkUndo();\n  \n  if (selectedIds.length === 0) return null;\n  \n  const handleBulkDelete = async () => {\n    setIsDeleting(true);\n    \n    try {\n      // 삭제될 예약 데이터를 저장\n      const deletedBookings = bookings.filter(booking => selectedIds.includes(booking.id));\n      \n      // Optimistic update - 선택된 항목들을 즉시 제거\n      await mutate(\n        async (currentData: any) => {\n          return currentData?.filter((booking: any) => \n            !selectedIds.includes(booking.id)\n          );\n        },\n        { revalidate: false }\n      );\n      \n      // API 호출\n      const response = await axiosInstance.delete('/api/bookings/bulk', {\n        data: { ids: selectedIds }\n      });\n      \n      logger.info('[BulkActionBar]', `Bulk delete successful - DELETE 200, deleted: ${response.data.deleted}`);\n      \n      // Undo 스택에 추가\n      addUndoItem('delete', deletedBookings);\n      \n      // 성공 후 서버 데이터로 갱신\n      await mutate();\n      \n      // 선택 초기화\n      onClearSelection();\n    } catch (error) {\n      logger.error('[BulkActionBar]', 'Bulk delete failed:', error);\n      toast.error('삭제에 실패했습니다');\n      // 실패 시 롤백\n      await mutate();\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n  \n  return (\n    <div className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white rounded-lg shadow-lg px-4 py-3 flex items-center gap-4 z-50\">\n      <span className=\"text-sm\">\n        {selectedIds.length}개 선택됨\n      </span>\n      \n      <button\n        onClick={handleBulkDelete}\n        disabled={isDeleting}\n        className=\"flex items-center gap-2 px-3 py-1.5 bg-red-600 hover:bg-red-700 rounded text-sm disabled:opacity-50\"\n      >\n        <Trash2 className=\"w-4 h-4\" />\n        {isDeleting ? '삭제 중...' : '선택 삭제'}\n      </button>\n      \n      <button\n        onClick={onClearSelection}\n        className=\"p-1.5 hover:bg-gray-800 rounded\"\n      >\n        <X className=\"w-4 h-4\" />\n      </button>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/CalendarProfiler.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[396,399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[396,399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[469,472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[469,472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[719,722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[719,722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[784,787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[784,787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2710,2713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2710,2713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2840,2843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2840,2843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { ReactProfiler, onRenderCallback, startProfiling, stopProfiling } from '../utils/profiler';\nimport { memoryProfiler } from '../utils/memory-profiler';\nimport CalendarVirtual from '../features/calendar/CalendarVirtual';\nimport { logger } from '@entrip/shared';\n\ninterface CalendarProfilerProps {\n  currentDate: Date;\n  bookings: any[];\n  onDayClick?: (date: Date) => void;\n  onBookingClick?: (booking: any) => void;\n}\n\nexport default function CalendarProfiler({ currentDate, bookings, onDayClick, onBookingClick }: CalendarProfilerProps) {\n  const [isProfiling, setIsProfiling] = useState(false);\n  const [profileResults, setProfileResults] = useState<any>(null);\n  const [memoryResults, setMemoryResults] = useState<any>(null);\n\n  const handleStartProfiling = () => {\n    logger.info('[CalendarProfiler]', 'Starting performance and memory profiling');\n    setIsProfiling(true);\n    startProfiling();\n    memoryProfiler.start();\n  };\n\n  const handleStopProfiling = () => {\n    logger.info('[CalendarProfiler]', 'Stopping profiling');\n    setIsProfiling(false);\n    \n    // Stop performance profiling\n    const perfResults = stopProfiling();\n    setProfileResults(perfResults);\n    \n    // Stop memory profiling\n    const memResults = memoryProfiler.stop();\n    setMemoryResults(memResults);\n  };\n\n  // Clean up effect\n  useEffect(() => {\n    return () => {\n      if (isProfiling) {\n        memoryProfiler.stop();\n      }\n    };\n  }, [isProfiling]);\n\n  return (\n    <div>\n      {/* Profiling controls */}\n      <div className=\"mb-4 p-4 bg-gray-100 rounded-lg\">\n        <div className=\"flex items-center gap-4\">\n          <button\n            onClick={handleStartProfiling}\n            disabled={isProfiling}\n            className=\"px-4 py-2 bg-blue-500 text-white rounded disabled:bg-gray-300\"\n          >\n            Start Profiling\n          </button>\n          <button\n            onClick={handleStopProfiling}\n            disabled={!isProfiling}\n            className=\"px-4 py-2 bg-red-500 text-white rounded disabled:bg-gray-300\"\n          >\n            Stop Profiling\n          </button>\n          {isProfiling && (\n            <span className=\"text-sm text-gray-600\">\n              🔴 Profiling in progress...\n            </span>\n          )}\n        </div>\n\n        {/* Results display */}\n        {profileResults && (\n          <div className=\"mt-4 p-3 bg-white rounded border\">\n            <h4 className=\"font-medium mb-2\">Performance Results:</h4>\n            <div className=\"text-sm space-y-1\">\n              <div>Total renders: {profileResults.length}</div>\n              <div>Slow renders (&gt;16.67ms): {profileResults.filter((r: any) => r.actualDuration > 16.67).length}</div>\n              <div>FPS estimate: {(1000 / (profileResults.reduce((sum: number, r: any) => sum + r.actualDuration, 0) / profileResults.length)).toFixed(1)}</div>\n            </div>\n          </div>\n        )}\n\n        {memoryResults && (\n          <div className=\"mt-4 p-3 bg-white rounded border\">\n            <h4 className=\"font-medium mb-2\">Memory Results:</h4>\n            <div className=\"text-sm space-y-1\">\n              <div>Initial: {(memoryResults.initialMemory / 1024 / 1024).toFixed(2)}MB</div>\n              <div>Final: {(memoryResults.finalMemory / 1024 / 1024).toFixed(2)}MB</div>\n              <div>Change: {memoryResults.percentageChange > 0 ? '+' : ''}{memoryResults.percentageChange.toFixed(1)}%</div>\n              <div className={memoryResults.percentageChange < -30 ? 'text-green-600 font-medium' : ''}>\n                {memoryResults.percentageChange < -30 && '✅ Memory reduction target achieved!'}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Calendar wrapped in Profiler */}\n      <ReactProfiler id=\"CalendarVirtual\" onRender={onRenderCallback}>\n        <CalendarVirtual\n          currentDate={currentDate}\n          bookings={bookings}\n          onDayClick={onDayClick}\n          onBookingClick={onBookingClick}\n        />\n      </ReactProfiler>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/FlightModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/FlightTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/StatusTag.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/booking/BookingModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/booking/__tests__/BookingModal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/chrome-tabs/ChromeTabContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/chrome-tabs/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/debug/LogViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/debug/__tests__/LogViewer.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/layout/AppFrame.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/layout/ContentShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/layout/ExchangeTicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/layout/HeaderExchange.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/layout/NavItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/layout/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/modals/NewTeamModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/providers/Providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/team-booking/TeamBookingCalendarView.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8033,8036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8033,8036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Icon } from '@entrip/ui'\nimport { useTeamBookingCalendar } from '@entrip/shared/hooks/useTeamBooking'\nimport { NewTeamModal } from '../modals/NewTeamModal'\nimport type { TeamBooking } from '@entrip/shared/types/team-booking'\nimport { logger } from '@entrip/shared'\n\nexport function TeamBookingCalendarView() {\n  const {\n    // bookings, // TODO: Use for calendar display\n    selectedMonth,\n    isLoading,\n    error,\n    navigateMonth,\n    goToToday,\n    getBookingsByDate,\n    clearError\n  } = useTeamBookingCalendar()\n  \n  const [isNewTeamModalOpen, setIsNewTeamModalOpen] = useState(false)\n  const [selectedDate, setSelectedDate] = useState<string>('')\n  const [selectedBooking, setSelectedBooking] = useState<TeamBooking | null>(null)\n\n  const getDaysInMonth = (year: number, month: number) => {\n    return new Date(year, month, 0).getDate()\n  }\n\n  const getFirstDayOfMonth = (year: number, month: number) => {\n    return new Date(year, month - 1, 1).getDay()\n  }\n\n  const monthDays = getDaysInMonth(selectedMonth.year, selectedMonth.month)\n  const firstDay = getFirstDayOfMonth(selectedMonth.year, selectedMonth.month)\n  \n  const monthName = new Date(selectedMonth.year, selectedMonth.month - 1).toLocaleDateString('ko-KR', {\n    year: 'numeric',\n    month: 'long'\n  })\n\n  const handleDateClick = (day: number) => {\n    const dateStr = `${selectedMonth.year}-${String(selectedMonth.month).padStart(2, '0')}-${String(day).padStart(2, '0')}`\n    setSelectedDate(dateStr)\n    setIsNewTeamModalOpen(true)\n  }\n\n  const renderBookingItem = (booking: TeamBooking) => {\n    const statusColors = {\n      draft: 'bg-gray-100 text-gray-700',\n      confirmed: 'bg-blue-100 text-blue-700',\n      in_progress: 'bg-green-100 text-green-700',\n      completed: 'bg-gray-100 text-gray-700',\n      cancelled: 'bg-red-100 text-red-700'\n    }\n\n    const statusLabels = {\n      draft: '예약대기',\n      confirmed: '확정',\n      in_progress: '진행중',\n      completed: '완료',\n      cancelled: '취소'\n    }\n\n    return (\n      <div\n        key={booking.id}\n        className=\"mb-1 p-1 bg-white border border-gray-200 rounded cursor-pointer hover:shadow-sm transition-shadow\"\n        onClick={() => setSelectedBooking(booking)}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"text-xs font-medium text-gray-900 truncate\">\n              {booking.teamCode}\n            </div>\n            <div className=\"text-xs text-gray-500 truncate\">\n              {booking.destination}\n            </div>\n          </div>\n          <span className={`ml-1 px-1.5 py-0.5 text-xs rounded ${statusColors[booking.status]}`}>\n            {statusLabels[booking.status]}\n          </span>\n        </div>\n        <div className=\"text-xs text-gray-500 mt-0.5\">\n          {booking.totalCount}명\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <Icon icon=\"ph:warning\" className=\"w-12 h-12 text-red-500 mx-auto mb-2\" />\n          <p className=\"text-red-600\">{error}</p>\n          <button\n            onClick={clearError}\n            className=\"mt-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200\"\n          >\n            다시 시도\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-white\">\n      {/* Calendar Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n        <div className=\"flex items-center gap-4\">\n          <button\n            onClick={() => navigateMonth('prev')}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <Icon icon=\"ph:caret-left\" className=\"w-5 h-5\" />\n          </button>\n          <h2 className=\"text-xl font-semibold\">{monthName}</h2>\n          <button\n            onClick={() => navigateMonth('next')}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <Icon icon=\"ph:caret-right\" className=\"w-5 h-5\" />\n          </button>\n          <button\n            onClick={goToToday}\n            className=\"px-3 py-1.5 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            오늘\n          </button>\n        </div>\n        \n        <button\n          onClick={() => setIsNewTeamModalOpen(true)}\n          className=\"flex items-center gap-2 px-4 py-2 bg-brand-primary text-white rounded-lg hover:bg-brand-600 transition-colors\"\n        >\n          <Icon icon=\"ph:plus\" className=\"w-5 h-5\" />\n          신규 팀 등록\n        </button>\n      </div>\n\n      {/* Calendar Grid */}\n      <div className=\"flex-1 overflow-auto\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <Icon icon=\"ph:spinner\" className=\"w-8 h-8 animate-spin text-gray-400\" />\n          </div>\n        ) : (\n          <div className=\"p-4\">\n            {/* Weekday Headers */}\n            <div className=\"grid grid-cols-7 gap-2 mb-2\">\n              {['일', '월', '화', '수', '목', '금', '토'].map((day, index) => (\n                <div\n                  key={day}\n                  className={`text-center text-sm font-medium ${\n                    index === 0 ? 'text-red-600' : index === 6 ? 'text-blue-600' : 'text-gray-700'\n                  }`}\n                >\n                  {day}\n                </div>\n              ))}\n            </div>\n\n            {/* Calendar Days */}\n            <div className=\"grid grid-cols-7 gap-2\">\n              {/* Empty cells for days before month starts */}\n              {Array.from({ length: firstDay }, (_, i) => (\n                <div key={`empty-${i}`} className=\"h-32\" />\n              ))}\n\n              {/* Days of the month */}\n              {Array.from({ length: monthDays }, (_, i) => {\n                const day = i + 1\n                const dateStr = `${selectedMonth.year}-${String(selectedMonth.month).padStart(2, '0')}-${String(day).padStart(2, '0')}`\n                const dayBookings = getBookingsByDate(dateStr)\n                const isToday = \n                  new Date().getFullYear() === selectedMonth.year &&\n                  new Date().getMonth() + 1 === selectedMonth.month &&\n                  new Date().getDate() === day\n\n                return (\n                  <div\n                    key={day}\n                    className={`h-32 border border-gray-200 rounded-lg p-2 hover:bg-gray-50 cursor-pointer transition-colors ${\n                      isToday ? 'bg-blue-50 border-blue-300' : ''\n                    }`}\n                    onClick={() => handleDateClick(day)}\n                  >\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className={`text-sm font-medium ${isToday ? 'text-blue-700' : 'text-gray-700'}`}>\n                        {day}\n                      </span>\n                      {dayBookings.length > 0 && (\n                        <span className=\"text-xs text-gray-500 bg-gray-100 px-1.5 py-0.5 rounded\">\n                          {dayBookings.length}건\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"space-y-1 overflow-y-auto max-h-24\">\n                      {dayBookings.slice(0, 3).map(renderBookingItem)}\n                      {dayBookings.length > 3 && (\n                        <div className=\"text-xs text-gray-500 text-center\">\n                          +{dayBookings.length - 3}건 더보기\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Modals */}\n      <NewTeamModal\n        isOpen={isNewTeamModalOpen}\n        onClose={() => {\n          setIsNewTeamModalOpen(false)\n          setSelectedDate('')\n        }}\n        onSave={(data: any) => {\n          logger.info('New team data', JSON.stringify(data));\n          // TODO: API 호출 또는 store 업데이트\n          setIsNewTeamModalOpen(false);\n          setSelectedDate('');\n        }}\n        selectedDate={selectedDate}\n      />\n\n      {/* TODO: Add TeamBookingDetailModal for viewing/editing existing bookings */}\n      {selectedBooking && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-2xl w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">예약 상세정보</h3>\n            <div className=\"space-y-2\">\n              <p><strong>팀 코드:</strong> {selectedBooking.teamCode}</p>\n              <p><strong>투어명:</strong> {selectedBooking.tourName}</p>\n              <p><strong>목적지:</strong> {selectedBooking.destination}</p>\n              <p><strong>출발일:</strong> {new Date(selectedBooking.departureDate).toLocaleDateString('ko-KR')}</p>\n              <p><strong>귀국일:</strong> {new Date(selectedBooking.returnDate).toLocaleDateString('ko-KR')}</p>\n              <p><strong>인원:</strong> {selectedBooking.totalCount}명</p>\n            </div>\n            <div className=\"mt-6 flex justify-end gap-3\">\n              <button\n                onClick={() => setSelectedBooking(null)}\n                className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200\"\n              >\n                닫기\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/team-booking/TeamBookingListView.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12391,12394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12391,12394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState } from 'react'\nimport { Icon } from '@entrip/ui'\nimport { useTeamBookingList } from '@entrip/shared/hooks/useTeamBooking'\nimport { NewTeamModal } from '../modals/NewTeamModal'\nimport type { TeamBooking } from '@entrip/shared/types/team-booking'\nimport { logger } from '@entrip/shared'\n\nexport function TeamBookingListView() {\n  const {\n    bookings,\n    filters,\n    totalCount,\n    isLoading,\n    error,\n    updateFilters,\n    clearError\n  } = useTeamBookingList()\n  \n  const [isNewTeamModalOpen, setIsNewTeamModalOpen] = useState(false)\n  const [selectedBookings, setSelectedBookings] = useState<Set<string>>(new Set())\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const statusColors = {\n    draft: 'bg-gray-100 text-gray-700',\n    confirmed: 'bg-blue-100 text-blue-700',\n    in_progress: 'bg-green-100 text-green-700',\n    completed: 'bg-gray-100 text-gray-700',\n    cancelled: 'bg-red-100 text-red-700'\n  }\n\n  const statusLabels = {\n    draft: '예약대기',\n    confirmed: '확정',\n    in_progress: '진행중',\n    completed: '완료',\n    cancelled: '취소'\n  }\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedBookings(new Set(bookings.map(b => b.id)))\n    } else {\n      setSelectedBookings(new Set())\n    }\n  }\n\n  const handleSelectBooking = (bookingId: string, checked: boolean) => {\n    const newSelected = new Set(selectedBookings)\n    if (checked) {\n      newSelected.add(bookingId)\n    } else {\n      newSelected.delete(bookingId)\n    }\n    setSelectedBookings(newSelected)\n  }\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault()\n    updateFilters({ ...filters, teamCode: searchTerm })\n  }\n\n  const handleStatusFilter = (status: string) => {\n    if (status === 'all') {\n      updateFilters({ ...filters, status: undefined })\n    } else {\n      updateFilters({ ...filters, status: [status as TeamBooking['status']] })\n    }\n  }\n\n  const handlePageChange = (page: number) => {\n    updateFilters({ ...filters, page })\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <Icon icon=\"ph:warning\" className=\"w-12 h-12 text-red-500 mx-auto mb-2\" />\n          <p className=\"text-red-600\">{error}</p>\n          <button\n            onClick={clearError}\n            className=\"mt-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200\"\n          >\n            다시 시도\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-white\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">팀 예약 관리</h1>\n          <button\n            onClick={() => setIsNewTeamModalOpen(true)}\n            className=\"flex items-center gap-2 px-4 py-2 bg-brand-primary text-white rounded-lg hover:bg-brand-600 transition-colors\"\n          >\n            <Icon icon=\"ph:plus\" className=\"w-5 h-5\" />\n            신규 팀 등록\n          </button>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center gap-4\">\n          <form onSubmit={handleSearch} className=\"flex-1 max-w-md\">\n            <div className=\"relative\">\n              <Icon\n                icon=\"ph:magnifying-glass\"\n                className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\"\n              />\n              <input\n                type=\"text\"\n                placeholder=\"팀 코드, 투어명, 고객사명으로 검색\"\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-primary focus:border-brand-primary\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n          </form>\n\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => handleStatusFilter('all')}\n              className={`px-3 py-1.5 text-sm rounded-lg transition-colors ${\n                !filters.status ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              전체\n            </button>\n            {Object.entries(statusLabels).map(([status, label]) => (\n              <button\n                key={status}\n                onClick={() => handleStatusFilter(status)}\n                className={`px-3 py-1.5 text-sm rounded-lg transition-colors ${\n                  filters.status?.[0] === status\n                    ? 'bg-gray-900 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                {label}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Table */}\n      <div className=\"flex-1 overflow-auto\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <Icon icon=\"ph:spinner\" className=\"w-8 h-8 animate-spin text-gray-400\" />\n          </div>\n        ) : bookings.length === 0 ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center\">\n              <Icon icon=\"ph:file-x\" className=\"w-12 h-12 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-gray-500\">예약 내역이 없습니다</p>\n            </div>\n          </div>\n        ) : (\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50 sticky top-0\">\n              <tr>\n                <th className=\"px-6 py-3 text-left\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"rounded border-gray-300\"\n                    checked={selectedBookings.size === bookings.length}\n                    onChange={(e) => handleSelectAll(e.target.checked)}\n                  />\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  팀 코드\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  투어명\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  목적지\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  일정\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  고객사\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  인원\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  상태\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  담당자\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  작업\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {bookings.map((booking) => (\n                <tr key={booking.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"rounded border-gray-300\"\n                      checked={selectedBookings.has(booking.id)}\n                      onChange={(e) => handleSelectBooking(booking.id, e.target.checked)}\n                    />\n                  </td>\n                  <td className=\"px-6 py-4 font-medium text-gray-900\">\n                    {booking.teamCode}\n                  </td>\n                  <td className=\"px-6 py-4 text-gray-900\">\n                    {booking.tourName}\n                  </td>\n                  <td className=\"px-6 py-4 text-gray-500\">\n                    {booking.destination}\n                  </td>\n                  <td className=\"px-6 py-4 text-gray-500\">\n                    <div>\n                      {new Date(booking.departureDate).toLocaleDateString('ko-KR')} ~\n                    </div>\n                    <div>\n                      {new Date(booking.returnDate).toLocaleDateString('ko-KR')}\n                    </div>\n                    <div className=\"text-xs text-gray-400\">\n                      {booking.nights}박 {booking.days}일\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 text-gray-900\">\n                    <div>{booking.customer.organizationName}</div>\n                    <div className=\"text-xs text-gray-500\">\n                      {booking.customer.contacts[0]?.name}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 text-gray-500\">\n                    <div>총 {booking.totalCount}명</div>\n                    <div className=\"text-xs\">\n                      성인 {booking.adultCount}\n                      {booking.childCount > 0 && `, 아동 ${booking.childCount}`}\n                      {booking.infantCount > 0 && `, 유아 ${booking.infantCount}`}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className={`px-2 py-1 text-xs rounded-full ${statusColors[booking.status]}`}>\n                      {statusLabels[booking.status]}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-gray-500\">\n                    <div className=\"text-sm\">\n                      {booking.managers.find(m => m.id === booking.mainManagerId)?.name || '-'}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 text-right\">\n                    <div className=\"flex items-center justify-end gap-2\">\n                      <button className=\"p-1 hover:bg-gray-100 rounded\">\n                        <Icon icon=\"ph:eye\" className=\"w-4 h-4 text-gray-600\" />\n                      </button>\n                      <button className=\"p-1 hover:bg-gray-100 rounded\">\n                        <Icon icon=\"ph:pencil\" className=\"w-4 h-4 text-gray-600\" />\n                      </button>\n                      <button className=\"p-1 hover:bg-gray-100 rounded\">\n                        <Icon icon=\"ph:trash\" className=\"w-4 h-4 text-gray-600\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n\n      {/* Pagination */}\n      {totalCount > 0 && (\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-700\">\n              총 {totalCount}건 중 {((filters.page! - 1) * filters.pageSize!) + 1}-\n              {Math.min(filters.page! * filters.pageSize!, totalCount)}건 표시\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => handlePageChange(filters.page! - 1)}\n                disabled={filters.page === 1}\n                className=\"px-3 py-1 text-sm bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                이전\n              </button>\n              <span className=\"px-3 py-1 text-sm\">\n                {filters.page} / {Math.ceil(totalCount / filters.pageSize!)}\n              </span>\n              <button\n                onClick={() => handlePageChange(filters.page! + 1)}\n                disabled={filters.page! * filters.pageSize! >= totalCount}\n                className=\"px-3 py-1 text-sm bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                다음\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Modals */}\n      <NewTeamModal\n        isOpen={isNewTeamModalOpen}\n        onClose={() => setIsNewTeamModalOpen(false)}\n        onSave={(data: any) => {\n          logger.info('New team data', JSON.stringify(data));\n          // TODO: API 호출 또는 store 업데이트\n          setIsNewTeamModalOpen(false);\n        }}\n        selectedDate={''}\n      />\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/widgets/ExchangeTicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/widgets/MessengerPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/components/widgets/NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/booking/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/bookings/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/bookings/components/BookingCreateModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/CalendarVirtual.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[392,395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[392,395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[465,468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[465,468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[573,576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[573,576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[597,600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[597,600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1380,1383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1380,1383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2431,2434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2431,2434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4616,4619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4616,4619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":156,"column":26,"nodeType":"Identifier","endLine":156,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":157,"column":30,"nodeType":"Identifier","endLine":157,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useMemo, memo, useCallback, useState, useEffect } from 'react';\nimport { FixedSizeGrid as Grid } from 'react-window';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isToday } from 'date-fns';\nimport { clsx } from 'clsx';\nimport StatusTag from '../../components/StatusTag';\n\ninterface CalendarVirtualProps {\n  currentDate: Date;\n  bookings: any[];\n  onDayClick?: (date: Date) => void;\n  onBookingClick?: (booking: any) => void;\n}\n\n// 개별 예약 아이템 - 메모이제이션으로 재렌더링 방지\nconst BookingItem = memo(({ booking, onClick }: { booking: any; onClick: (booking: any) => void }) => {\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    onClick(booking);\n  }, [booking, onClick]);\n\n  return (\n    <div\n      className=\"text-xs p-1 bg-white border rounded cursor-pointer hover:shadow-sm\"\n      onClick={handleClick}\n    >\n      <div className=\"flex items-center justify-between\">\n        <span className=\"truncate font-medium\">\n          {booking.customerName}\n        </span>\n        <StatusTag status={booking.status} size=\"sm\" />\n      </div>\n      <div className=\"text-gray-500 truncate\">\n        {booking.destination} · {booking.numberOfPeople}명\n      </div>\n    </div>\n  );\n});\n\nBookingItem.displayName = 'BookingItem';\n\n// 셀 렌더러 - Grid를 위한 최적화\nconst Cell = memo(({ columnIndex, rowIndex, style, data }: any) => {\n  const { allDays, bookingsByDate, onDayClick, onBookingClick, currentMonth, daysPerWeek } = data;\n  const dayIndex = rowIndex * daysPerWeek + columnIndex;\n  \n  if (dayIndex >= allDays.length) return null;\n  \n  const date = allDays[dayIndex];\n  const dateStr = format(date, 'yyyy-MM-dd');\n  const dayBookings = bookingsByDate.get(dateStr) || [];\n  const isCurrentMonth = isSameMonth(date, currentMonth);\n  const isTodayDate = isToday(date);\n  \n  return (\n    <div\n      style={style}\n      data-testid=\"calendar-day\"\n      className={clsx(\n        'p-2 border-r border-b border-gray-200 cursor-pointer hover:bg-gray-50',\n        !isCurrentMonth && 'bg-gray-50 text-gray-400',\n        isTodayDate && 'bg-blue-50'\n      )}\n      onClick={() => onDayClick?.(date)}\n    >\n      <div className={clsx(\n        'font-medium text-sm mb-1',\n        isTodayDate && 'text-blue-600'\n      )}>\n        {format(date, 'd')}\n      </div>\n      \n      {/* 예약 목록 (최대 3개 표시) */}\n      <div className=\"space-y-1\">\n        {dayBookings.slice(0, 3).map((booking: any) => (\n          <BookingItem\n            key={`${booking.id}-${dateStr}`}\n            booking={booking}\n            onClick={onBookingClick}\n          />\n        ))}\n        \n        {dayBookings.length > 3 && (\n          <div className=\"text-xs text-gray-500 text-center\">\n            +{dayBookings.length - 3}개 더보기\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nCell.displayName = 'Cell';\n\nconst CalendarVirtualMemo = memo(function CalendarVirtual({ currentDate, bookings, onDayClick, onBookingClick }: CalendarVirtualProps) {\n  // Window width state for responsive grid\n  const [windowWidth, setWindowWidth] = useState(typeof window !== 'undefined' ? window.innerWidth : 800);\n  \n  useEffect(() => {\n    const handleResize = () => setWindowWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // 월의 모든 날짜 계산 - 메모이제이션\n  const { allDays } = useMemo(() => {\n    const monthStart = startOfMonth(currentDate);\n    const monthEnd = endOfMonth(currentDate);\n    const days = eachDayOfInterval({ start: monthStart, end: monthEnd });\n    \n    // 첫 번째 날의 요일 (0=일요일)\n    const startDayOfWeek = monthStart.getDay();\n    \n    // 이전 달의 날짜들 추가\n    const prevMonthDays = Array.from({ length: startDayOfWeek }, (_, i) => {\n      const date = new Date(monthStart);\n      date.setDate(date.getDate() - (startDayOfWeek - i));\n      return date;\n    });\n    \n    // 다음 달의 날짜들 추가 (총 42일 = 6주)\n    const totalDays = [...prevMonthDays, ...days];\n    const remainingDays = 42 - totalDays.length;\n    const nextMonthDays = Array.from({ length: remainingDays }, (_, i) => {\n      const date = new Date(monthEnd);\n      date.setDate(date.getDate() + i + 1);\n      return date;\n    });\n    \n    const allDaysArray = [...totalDays, ...nextMonthDays];\n    \n    // 주별로 그룹화\n    const weeksArray = [];\n    for (let i = 0; i < allDaysArray.length; i += 7) {\n      weeksArray.push(allDaysArray.slice(i, i + 7));\n    }\n    \n    return { allDays: allDaysArray };\n  }, [currentDate]);\n  \n  // 날짜별로 예약 그룹화 - 최적화된 메모이제이션\n  const bookingsByDate = useMemo(() => {\n    const map = new Map<string, any[]>();\n    bookings.forEach((booking) => {\n      const date = booking.departureDate;\n      if (!map.has(date)) {\n        map.set(date, []);\n      }\n      map.get(date)!.push(booking);\n    });\n    return map;\n  }, [bookings]);\n  \n  // 콜백 메모이제이션\n  const handleDayClick = useCallback(onDayClick || (() => {}), [onDayClick]);\n  const handleBookingClick = useCallback(onBookingClick || (() => {}), [onBookingClick]);\n  \n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200\" data-testid=\"calendar-virtual\">\n      {/* 요일 헤더 */}\n      <div className=\"flex border-b border-gray-200 bg-gray-50\">\n        {['일', '월', '화', '수', '목', '금', '토'].map((day, index) => (\n          <div\n            key={day}\n            className={clsx(\n              'flex-1 py-3 text-center text-sm font-medium',\n              index === 0 && 'text-red-500',\n              index === 6 && 'text-blue-500'\n            )}\n          >\n            {day}\n          </div>\n        ))}\n      </div>\n      \n      {/* Grid 가상 스크롤 적용된 캘린더 */}\n      <Grid\n        className=\"calendar-grid\"\n        data-testid=\"scroll-container\"\n        height={600} // 캘린더 높이\n        width={windowWidth > 768 ? 800 : windowWidth - 32} // 반응형 너비\n        rowCount={6} // 6주\n        columnCount={7} // 7일\n        rowHeight={100} // 각 행의 높이\n        columnWidth={windowWidth > 768 ? 114 : Math.floor((windowWidth - 32) / 7)} // 각 열의 너비\n        itemData={{\n          allDays,\n          bookingsByDate,\n          onDayClick: handleDayClick,\n          onBookingClick: handleBookingClick,\n          currentMonth: currentDate,\n          daysPerWeek: 7\n        }}\n      >\n        {Cell}\n      </Grid>\n    </div>\n  );\n});\n\nCalendarVirtualMemo.displayName = 'CalendarVirtual';\n\nexport default CalendarVirtualMemo;","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/MonthlyCalendarView.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[371,374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[371,374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { format } from 'date-fns';\nimport { BookingEvent, MonthlySummary, useModalStore, BookingStatus } from '@entrip/shared';\nimport { CalendarMonth, QuickBookingModal, EditBookingModal, MonthlySummaryFooter } from '@entrip/ui';\n\n// Export QuickBookingFormData type if needed\nexport type QuickBookingFormData = any;\n\n// 임시 더미 데이터 생성 함수\nconst generateDummyBookings = (month: Date): Record<string, BookingEvent[]> => {\n  const bookings: Record<string, BookingEvent[]> = {};\n  const year = month.getFullYear();\n  const monthNum = month.getMonth();\n  \n  // 여행지 목록\n  const destinations = [\n    '제주도', '부산', '경주', '강릉', '전주', '여수', '통영', '거제도',\n    '일본 오사카', '일본 도쿄', '일본 후쿠오카', '일본 교토',\n    '베트남 다낭', '베트남 호치민', '태국 방콕', '태국 치앙마이',\n    '싱가포르', '홍콩', '대만 타이베이', '필리핀 세부'\n  ];\n  \n  // 팀 유형\n  const teamTypes = [\n    '가족여행', '신혼여행', '효도관광', '친구여행', '단체여행', \n    '수학여행', '워크샵', '동호회', 'VIP투어', '패키지투어'\n  ];\n  \n  // 매니저 이름\n  const managers = ['김민수', '이지영', '박준혁', '최서연', '정태호'];\n  \n  // 월별 시즌에 따른 예약 수 조정\n  const seasonMultiplier = [0.7, 0.8, 1.0, 1.2, 1.5, 1.3, 1.6, 1.8, 1.4, 1.1, 0.9, 0.8][monthNum];\n  const bookingCount = Math.floor((Math.random() * 15 + 20) * seasonMultiplier);\n  \n  for (let i = 0; i < bookingCount; i++) {\n    const day = Math.floor(Math.random() * 28) + 1;\n    const dateKey = format(new Date(year, monthNum, day), 'yyyy-MM-dd');\n    \n    if (!bookings[dateKey]) {\n      bookings[dateKey] = [];\n    }\n    \n    const destination = destinations[Math.floor(Math.random() * destinations.length)];\n    const teamType = teamTypes[Math.floor(Math.random() * teamTypes.length)];\n    const manager = managers[Math.floor(Math.random() * managers.length)];\n    \n    // 여행 유형별 인원수 조정\n    let paxCount = 2;\n    if (teamType.includes('가족')) paxCount = Math.floor(Math.random() * 4) + 3;\n    else if (teamType.includes('단체') || teamType.includes('수학')) paxCount = Math.floor(Math.random() * 30) + 20;\n    else if (teamType.includes('동호회') || teamType.includes('워크샵')) paxCount = Math.floor(Math.random() * 15) + 10;\n    else if (teamType.includes('신혼')) paxCount = 2;\n    else paxCount = Math.floor(Math.random() * 8) + 2;\n    \n    // 목적지별 가격 조정\n    const isOverseas = destination.includes('일본') || destination.includes('베트남') || \n                       destination.includes('태국') || destination.includes('싱가포르') || \n                       destination.includes('홍콩') || destination.includes('대만') || destination.includes('필리핀');\n    \n    const basePrice = isOverseas ? 800000 : 300000;\n    const pricePerPerson = basePrice + Math.floor(Math.random() * 200000);\n    const revenue = pricePerPerson * paxCount;\n    const cost = Math.floor(revenue * (0.7 + Math.random() * 0.15)); // 70-85% 원가율\n    \n    const types: BookingEvent['typeCode'][] = ['GF', 'IN', 'HM', 'AT'];\n    const statuses: BookingEvent['status'][] = [BookingStatus.PENDING, BookingStatus.CONFIRMED, BookingStatus.CANCELLED];\n    const status = statuses[Math.random() < 0.7 ? 1 : Math.random() < 0.9 ? 0 : 2]; // 70% 확정, 20% 대기, 10% 취소\n    \n    bookings[dateKey].push({\n      id: `booking-${year}-${monthNum}-${i}`,\n      typeCode: types[Math.floor(Math.random() * types.length)],\n      name: `${destination} ${teamType}`,\n      status: status,\n      manager: manager,\n      paxCount: paxCount,\n      date: dateKey,\n      revenue: revenue,\n      cost: cost\n    });\n  }\n  \n  return bookings;\n};\n\nexport function MonthlyCalendarView() {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const { \n    isQuickAddModalOpen, \n    selectedDate, \n    openQuickAddModal, \n    closeQuickAddModal,\n    isEditModalOpen,\n    selectedBooking,\n    openEditModal,\n    closeEditModal \n  } = useModalStore();\n  const [bookingData, setBookingData] = useState<Record<string, BookingEvent[]>>({});\n  \n  // 임시 더미 데이터 사용\n  const bookings = useMemo(() => ({ ...generateDummyBookings(currentMonth), ...bookingData }), [currentMonth, bookingData]);\n  \n  // 월간 합계 계산\n  const monthlySummary = useMemo((): MonthlySummary => {\n    let teamCount = 0;\n    let paxCount = 0;\n    let revenue = 0;\n    let cost = 0;\n    \n    Object.values(bookings).forEach(dayBookings => {\n      dayBookings.forEach(booking => {\n        if (booking.status !== 'CANCELLED') {\n          teamCount++;\n          paxCount += booking.paxCount || 0;\n          revenue += booking.revenue || 0;\n          cost += booking.cost || 0;\n        }\n      });\n    });\n    \n    return {\n      teamCount,\n      paxCount,\n      revenue,\n      profit: revenue - cost\n    };\n  }, [bookings]);\n\n  const handleAddBooking = (date: Date) => {\n    openQuickAddModal(date);\n  };\n  \n  const handleQuickAddSubmit = async (data: QuickBookingFormData) => {\n    // 새 예약 데이터 추가\n    const newBooking: BookingEvent = {\n      id: `booking-${Date.now()}`,\n      typeCode: data.teamType as 'GF' | 'IN' | 'HM' | 'AT' | undefined,\n      name: data.teamName,\n      status: BookingStatus.PENDING,\n      manager: '김민수', // 임시 담당자\n      paxCount: data.pax,\n      date: data.departureDate,\n      revenue: data.pax * 500000, // 임시 계산\n      cost: data.pax * 350000 // 임시 계산\n    };\n    \n    setBookingData(prev => ({\n      ...prev,\n      [data.departureDate]: [...(prev[data.departureDate] || []), newBooking]\n    }));\n    \n    closeQuickAddModal();\n    alert('예약이 추가되었습니다!');\n  };\n\n  const handleBookingClick = (booking: BookingEvent) => {\n    openEditModal(booking);\n  };\n  \n  const handleEditSubmit = async (data: QuickBookingFormData) => {\n    \n    // 기존 예약 업데이트\n    if (selectedBooking) {\n      const updatedBooking: BookingEvent = {\n        ...selectedBooking,\n        typeCode: data.teamType as 'GF' | 'IN' | 'HM' | 'AT' | undefined,\n        name: data.teamName,\n        paxCount: data.pax,\n        date: data.departureDate,\n        revenue: data.pax * 500000, // 임시 계산\n        cost: data.pax * 350000 // 임시 계산\n      };\n      \n      setBookingData(prev => {\n        const newData = { ...prev };\n        // 기존 날짜에서 예약 제거\n        if (newData[selectedBooking.date]) {\n          newData[selectedBooking.date] = newData[selectedBooking.date].filter(b => b.id !== selectedBooking.id);\n        }\n        // 새 날짜에 예약 추가\n        if (!newData[data.departureDate]) {\n          newData[data.departureDate] = [];\n        }\n        newData[data.departureDate].push(updatedBooking);\n        return newData;\n      });\n      \n      closeEditModal();\n      alert('예약이 수정되었습니다!');\n    }\n  };\n\n  // Removed unused handleMonthChange - setCurrentMonth used directly\n\n  return (\n    <>\n      <div className=\"h-full flex flex-col\">\n        {/* 캘린더 본체 */}\n        <div className=\"flex-1 overflow-hidden\">\n          <CalendarMonth\n            month={currentMonth}\n            bookings={bookings}\n            onAddBooking={handleAddBooking}\n            onBookingClick={handleBookingClick}\n            onMonthChange={setCurrentMonth}\n          />\n        </div>\n        \n        {/* 월간 합계 푸터 */}\n        <MonthlySummaryFooter summary={monthlySummary} />\n      </div>\n      \n      {/* 빠른 예약 추가 모달 */}\n      <QuickBookingModal\n        isOpen={isQuickAddModalOpen}\n        onClose={closeQuickAddModal}\n        onSave={handleQuickAddSubmit}\n        selectedDate={selectedDate ? format(selectedDate, 'yyyy-MM-dd') : undefined}\n      />\n      \n      {/* 예약 수정 모달 */}\n      <EditBookingModal\n        isOpen={isEditModalOpen}\n        onClose={closeEditModal}\n        onSave={handleEditSubmit}\n        booking={selectedBooking}\n      />\n    </>\n  );\n}\n\nexport default MonthlyCalendarView;\n","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/WeekView.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1048,1051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1048,1051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1536,1539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1536,1539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1586,1589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1586,1589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport { format, addDays, startOfWeek } from 'date-fns';\nimport { ko } from 'date-fns/locale';\nimport { useBookings, updateBooking } from '../../hooks/useBookings';\nimport StatusTag from '../../components/StatusTag';\nimport { logger } from '@entrip/shared';\n\ninterface WeekViewProps {\n  currentDate: Date;\n}\n\nexport default function WeekView({ currentDate }: WeekViewProps) {\n  const { bookings, mutate } = useBookings();\n  const [_isDragging, setIsDragging] = useState(false);\n  \n  // 주간 시작일 계산\n  const weekStart = startOfWeek(currentDate, { weekStartsOn: 1 }); // 월요일 시작\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n  \n  // 날짜별로 예약 그룹화\n  const bookingsByDate = weekDays.reduce((acc, date) => {\n    const dateStr = format(date, 'yyyy-MM-dd');\n    acc[dateStr] = bookings.filter(booking => \n      booking.startDate === dateStr\n    );\n    return acc;\n  }, {} as Record<string, any[]>);\n\n  const handleDragEnd = async (result: DropResult) => {\n    setIsDragging(false);\n    \n    if (!result.destination) return;\n    \n    const bookingId = result.draggableId;\n    const newDate = result.destination.droppableId;\n    \n    const booking = bookings.find(b => b.id === bookingId);\n    if (!booking) return;\n    \n    // 날짜가 변경된 경우에만 업데이트\n    if (booking.startDate !== newDate) {\n      try {\n        // Optimistic update\n        await mutate(\n          async (currentData: any) => {\n            return currentData?.map((b: any) =>\n              b.id === bookingId ? { ...b, startDate: newDate } : b\n            );\n          },\n          { revalidate: false }\n        );\n        \n        // API 호출\n        await updateBooking(bookingId, { startDate: newDate });\n        \n        // 서버 데이터로 갱신\n        await mutate();\n        \n        logger.info('Booking moved', `${bookingId} to ${newDate} - PATCH 200`);\n      } catch (error) {\n        logger.error('Failed to update booking', error instanceof Error ? error.message : String(error));\n        // 에러 시 롤백\n        await mutate();\n      }\n    }\n  };\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd} onDragStart={() => setIsDragging(true)}>\n      <div className=\"grid grid-cols-7 gap-2 h-full\">\n        {weekDays.map((date, index) => {\n          const dateStr = format(date, 'yyyy-MM-dd');\n          const isToday = format(new Date(), 'yyyy-MM-dd') === dateStr;\n          \n          return (\n            <div key={dateStr} className={`border rounded-lg ${isToday ? 'border-blue-500' : 'border-gray-200'}`}>\n              <div className={`p-2 text-center font-medium ${isToday ? 'bg-blue-50' : 'bg-gray-50'}`}>\n                <div className=\"text-sm text-gray-500\">\n                  {format(date, 'EEE', { locale: ko })}\n                </div>\n                <div className={`text-lg ${isToday ? 'text-blue-600' : ''}`}>\n                  {format(date, 'd')}\n                </div>\n              </div>\n              \n              <Droppable droppableId={dateStr}>\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`p-2 min-h-[300px] ${\n                      snapshot.isDraggingOver ? 'bg-blue-50' : ''\n                    }`}\n                  >\n                    {bookingsByDate[dateStr]?.map((booking, _index) => (\n                      <Draggable\n                        key={booking.id}\n                        draggableId={booking.id}\n                        index={index}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            className={`mb-2 p-2 bg-white border rounded shadow-sm cursor-move ${\n                              snapshot.isDragging ? 'shadow-lg' : ''\n                            }`}\n                          >\n                            <div className=\"text-sm font-medium truncate\">\n                              {booking.customerName}\n                            </div>\n                            <div className=\"text-xs text-gray-500 truncate\">\n                              {booking.destination}\n                            </div>\n                            <div className=\"mt-1\">\n                              <StatusTag status={booking.status} size=\"sm\" />\n                            </div>\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          );\n        })}\n      </div>\n    </DragDropContext>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/WeekViewMobile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2321,2324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2321,2324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2370,2373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2370,2373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2802,2805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2802,2805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2852,2855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2852,2855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5519,5522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5519,5522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5534,5537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5534,5537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6283,6286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6283,6286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6298,6301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6298,6301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport { format, addDays, startOfWeek, addWeeks, subWeeks } from 'date-fns';\nimport { ko } from 'date-fns/locale';\nimport { useBookings, updateBooking } from '../../hooks/useBookings';\nimport StatusTag from '../../components/StatusTag';\nimport { useSwipeable } from 'react-swipeable';\nimport { logger } from '@entrip/shared';\n\n// react-beautiful-dnd를 동적으로 import (SSR 이슈 해결)\nconst DragDropContext = dynamic(\n  () => import('react-beautiful-dnd').then(mod => mod.DragDropContext),\n  { ssr: false }\n);\nconst Droppable = dynamic(\n  () => import('react-beautiful-dnd').then(mod => mod.Droppable),\n  { ssr: false }\n);\nconst Draggable = dynamic(\n  () => import('react-beautiful-dnd').then(mod => mod.Draggable),\n  { ssr: false }\n);\n\ninterface WeekViewMobileProps {\n  currentDate: Date;\n}\n\nexport default function WeekViewMobile({ currentDate }: WeekViewMobileProps) {\n  const { bookings, mutate } = useBookings();\n  const [isDragging, setIsDragging] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const [currentWeek, setCurrentWeek] = useState(currentDate);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  \n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n  \n  // 스와이프 핸들러\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      if (!isTransitioning) {\n        setIsTransitioning(true);\n        setCurrentWeek(prev => addWeeks(prev, 1));\n        setTimeout(() => setIsTransitioning(false), 300);\n      }\n    },\n    onSwipedRight: () => {\n      if (!isTransitioning) {\n        setIsTransitioning(true);\n        setCurrentWeek(prev => subWeeks(prev, 1));\n        setTimeout(() => setIsTransitioning(false), 300);\n      }\n    },\n    preventScrollOnSwipe: true,\n    trackMouse: false,\n    trackTouch: true,\n    delta: 50, // 최소 스와이프 거리\n  });\n  \n  // 주간 시작일 계산\n  const weekStart = startOfWeek(currentWeek, { weekStartsOn: 1 }); // 월요일 시작\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n  \n  // 날짜별로 예약 그룹화\n  const bookingsByDate = weekDays.reduce((acc, date) => {\n    const dateStr = format(date, 'yyyy-MM-dd');\n    acc[dateStr] = bookings.filter(booking => \n      booking.startDate === dateStr\n    );\n    return acc;\n  }, {} as Record<string, any[]>);\n\n  const handleDragEnd = async (result: any) => {\n    setIsDragging(false);\n    \n    if (!result.destination) return;\n    \n    const bookingId = result.draggableId;\n    const newDate = result.destination.droppableId;\n    \n    const booking = bookings.find(b => b.id === bookingId);\n    if (!booking) return;\n    \n    // 날짜가 변경된 경우에만 업데이트\n    if (booking.startDate !== newDate) {\n      try {\n        // Optimistic update\n        await mutate(\n          async (currentData: any) => {\n            return currentData?.map((b: any) =>\n              b.id === bookingId ? { ...b, startDate: newDate } : b\n            );\n          },\n          { revalidate: false }\n        );\n        \n        // API 호출\n        await updateBooking(bookingId, { startDate: newDate });\n        \n        // 서버 데이터로 갱신\n        await mutate();\n        \n        logger.info('[Mobile] Booking moved', `${bookingId} to ${newDate} - PATCH 200`);\n      } catch (error) {\n        logger.error('Failed to update booking', error instanceof Error ? error.message : String(error));\n        // 에러 시 롤백\n        await mutate();\n      }\n    }\n  };\n\n  if (!isMounted) {\n    return <div className=\"h-full flex items-center justify-center\">Loading...</div>;\n  }\n\n  return (\n    <DragDropContext \n      onDragEnd={handleDragEnd} \n      onDragStart={() => setIsDragging(true)}\n    >\n      {/* 주간 헤더 */}\n      <div className=\"bg-white border-b border-gray-200 p-3 flex items-center justify-between\">\n        <button\n          onClick={() => setCurrentWeek(prev => subWeeks(prev, 1))}\n          className=\"p-2 hover:bg-gray-100 rounded\"\n        >\n          ‹\n        </button>\n        <h3 className=\"font-medium\">\n          {format(weekStart, 'yyyy년 M월')} {format(weekStart, 'd일')} - {format(addDays(weekStart, 6), 'd일')}\n        </h3>\n        <button\n          onClick={() => setCurrentWeek(prev => addWeeks(prev, 1))}\n          className=\"p-2 hover:bg-gray-100 rounded\"\n        >\n          ›\n        </button>\n      </div>\n      \n      {/* 모바일 최적화: 스크롤 가능한 가로 레이아웃 */}\n      <div \n        {...handlers} \n        className={`flex overflow-x-auto snap-x snap-mandatory h-full transition-all duration-300 ${\n          isTransitioning ? 'opacity-50' : ''\n        }`}\n      >\n        {weekDays.map((date) => {\n          const dateStr = format(date, 'yyyy-MM-dd');\n          const isToday = format(new Date(), 'yyyy-MM-dd') === dateStr;\n          \n          return (\n            <div \n              key={dateStr} \n              className=\"flex-shrink-0 w-full sm:w-80 snap-center px-2\"\n            >\n              <div className={`border rounded-lg h-full ${isToday ? 'border-blue-500' : 'border-gray-200'}`}>\n                <div className={`p-3 text-center font-medium sticky top-0 z-10 ${isToday ? 'bg-blue-50' : 'bg-gray-50'}`}>\n                  <div className=\"text-sm text-gray-500\">\n                    {format(date, 'EEE', { locale: ko })}\n                  </div>\n                  <div className={`text-lg ${isToday ? 'text-blue-600' : ''}`}>\n                    {format(date, 'M월 d일')}\n                  </div>\n                </div>\n                \n                <Droppable droppableId={dateStr}>\n                  {(provided: any, snapshot: any) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={`p-3 min-h-[400px] ${\n                        snapshot.isDraggingOver ? 'bg-blue-50' : ''\n                      }`}\n                      style={{\n                        touchAction: isDragging ? 'none' : 'auto', // 드래그 중 스크롤 방지\n                      }}\n                    >\n                      {bookingsByDate[dateStr]?.map((booking, index) => (\n                        <Draggable\n                          key={booking.id}\n                          draggableId={booking.id}\n                          index={index}\n                        >\n                          {(provided: any, snapshot: any) => (\n                            <div\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              className={`mb-3 p-3 bg-white border rounded-lg shadow-sm ${\n                                snapshot.isDragging ? 'shadow-lg opacity-90' : ''\n                              }`}\n                              style={{\n                                ...provided.draggableProps.style,\n                                touchAction: 'manipulation', // 터치 최적화\n                              }}\n                            >\n                              <div className=\"flex items-center justify-between mb-1\">\n                                <div className=\"font-medium truncate text-sm\">\n                                  {booking.customerName}\n                                </div>\n                                <div className=\"flex-shrink-0 ml-2\">\n                                  <StatusTag status={booking.status} size=\"sm\" />\n                                </div>\n                              </div>\n                              <div className=\"text-xs text-gray-500\">\n                                {booking.destination} · {booking.numberOfPeople}명\n                              </div>\n                            </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </DragDropContext>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/components/AddBookingFab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/components/CalendarDayCell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/components/CalendarGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/components/CalendarNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/components/ReservationBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/components/ReservationHoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/components/SummaryFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/hooks/useMonthlyReservations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/features/calendar/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/hooks/useBookings.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'mutate'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [mutate]","fix":{"range":[1665,1667],"text":"[mutate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport useSWR from 'swr';\nimport axiosInstance from '../lib/axios';\nimport type { Booking } from '@entrip/shared';\nimport { initializeSocket, subscribeToBookingEvents, unsubscribeFromBookingEvents } from '../lib/socket';\n\n// Fetcher function for SWR\nconst fetcher = (url: string) => axiosInstance.get(url).then(res => res.data);\n\nexport function useBookings() {\n  const { data, error, isLoading, mutate } = useSWR<Booking[]>('/api/bookings', fetcher, {\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n  });\n\n  useEffect(() => {\n    // WebSocket 초기화\n    const socket = initializeSocket();\n    \n    if (socket) {\n      // WebSocket 이벤트 구독\n      subscribeToBookingEvents({\n        onCreate: (_event) => {\n          // console.log('[useBookings] booking:create event received', event.bookingId);\n          mutate(); // SWR 캐시 갱신\n        },\n        onUpdate: (_event) => {\n          // console.log('[useBookings] booking:update event received', event.bookingId);\n          mutate(); // SWR 캐시 갱신\n        },\n        onDelete: (_event) => {\n          // console.log('[useBookings] booking:delete event received', event.bookingId);\n          mutate(); // SWR 캐시 갱신\n        },\n        onBulkCreate: (_event) => {\n          // console.log('[useBookings] booking:bulk-create event received', event.count);\n          mutate(); // SWR 캐시 갱신\n        },\n        onBulkDelete: (_event) => {\n          // console.log('[useBookings] booking:bulk-delete event received', event.count);\n          mutate(); // SWR 캐시 갱신\n        }\n      });\n    }\n    \n    // Cleanup\n    return () => {\n      unsubscribeFromBookingEvents();\n    };\n  }, []); // 빈 의존성 배열 - 컴포넌트 마운트 시 한 번만 실행\n\n  return {\n    bookings: data || [],\n    isLoading,\n    isError: error,\n    mutate,\n  };\n}\n\n// Hook for single booking\nexport function useBooking(id: string | null) {\n  const { data, error, isLoading, mutate } = useSWR<Booking>(\n    id ? `/api/bookings/${id}` : null,\n    fetcher\n  );\n\n  return {\n    booking: data,\n    isLoading,\n    isError: error,\n    mutate,\n  };\n}\n\n// Mutation functions\nexport async function createBooking(booking: Partial<Booking>) {\n  const response = await axiosInstance.post('/api/bookings', booking);\n  return response.data;\n}\n\nexport async function updateBooking(id: string, booking: Partial<Booking>) {\n  const response = await axiosInstance.put(`/api/bookings/${id}`, booking);\n  return response.data;\n}\n\nexport async function deleteBooking(id: string) {\n  const response = await axiosInstance.delete(`/api/bookings/${id}`);\n  return response.data;\n}","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/hooks/useBulkUndo.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[193,196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[193,196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[499,502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[499,502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleUndo'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleUndo]","fix":{"range":[1586,1588],"text":"[handleUndo]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport axiosInstance from '../lib/axios';\n\ninterface UndoState {\n  type: 'delete';\n  data: any[];\n  timestamp: number;\n}\n\nexport const useBulkUndo = () => {\n  const [undoStack, setUndoStack] = useState<UndoState[]>([]);\n  const undoTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const toastIdRef = useRef<string | number | null>(null);\n\n  const addUndoItem = useCallback((type: 'delete', data: any[]) => {\n    const undoItem: UndoState = {\n      type,\n      data,\n      timestamp: Date.now()\n    };\n\n    setUndoStack(prev => [...prev, undoItem]);\n\n    // 기존 타이머 취소\n    if (undoTimerRef.current) {\n      clearTimeout(undoTimerRef.current);\n    }\n\n    // Toast 표시\n    toastIdRef.current = toast.info(\n      React.createElement('div', { className: \"flex items-center justify-between\" },\n        React.createElement('span', {}, `${data.length}개 항목이 삭제되었습니다`),\n        React.createElement('button', {\n          onClick: () => handleUndo(undoItem),\n          className: \"ml-4 px-3 py-1 bg-white text-blue-600 rounded hover:bg-blue-50\"\n        }, '실행 취소')\n      ),\n      {\n        autoClose: 5000,\n        closeButton: false,\n        onClose: () => {\n          // Toast가 닫히면 undo stack에서 제거\n          setUndoStack(prev => prev.filter(item => item !== undoItem));\n        }\n      }\n    );\n\n    // 5초 후 자동으로 undo stack에서 제거\n    undoTimerRef.current = setTimeout(() => {\n      setUndoStack(prev => prev.filter(item => item !== undoItem));\n      toastIdRef.current = null;\n    }, 5000);\n  }, []);\n\n  const handleUndo = useCallback(async (undoItem: UndoState) => {\n    try {\n      if (undoItem.type === 'delete') {\n        // 삭제된 항목들을 복원\n        const response = await axiosInstance.post('/api/bookings/bulk-restore', {\n          bookings: undoItem.data\n        });\n\n        if (response.status === 200) {\n          toast.success(`${undoItem.data.length}개 항목이 복원되었습니다`);\n          \n          // Toast 닫기\n          if (toastIdRef.current) {\n            toast.dismiss(toastIdRef.current);\n          }\n          \n          // Undo stack에서 제거\n          setUndoStack(prev => prev.filter(item => item !== undoItem));\n          \n          // 타이머 정리\n          if (undoTimerRef.current) {\n            clearTimeout(undoTimerRef.current);\n            undoTimerRef.current = null;\n          }\n          \n          return true;\n        }\n      }\n    } catch (error) {\n      console.error('Undo 실패:', error);\n      toast.error('복원에 실패했습니다');\n    }\n    \n    return false;\n  }, []);\n\n  const clearUndo = useCallback(() => {\n    setUndoStack([]);\n    if (undoTimerRef.current) {\n      clearTimeout(undoTimerRef.current);\n      undoTimerRef.current = null;\n    }\n    if (toastIdRef.current) {\n      toast.dismiss(toastIdRef.current);\n      toastIdRef.current = null;\n    }\n  }, []);\n\n  return {\n    addUndoItem,\n    handleUndo,\n    clearUndo,\n    hasUndo: undoStack.length > 0\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/hooks/useExchangeRates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/hooks/useIsomorphicLayoutEffect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/hooks/useTabRouter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/lib/axios.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/lib/fetcher.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/lib/queryClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/lib/socket.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1216,1219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1216,1219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1250,1253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1250,1253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1284,1287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1284,1287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1322,1325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1322,1325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1360,1363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1360,1363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2864,2867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2864,2867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { io, Socket } from 'socket.io-client';\nimport Cookies from 'js-cookie';\nimport { logger } from '@entrip/shared';\n\nlet socket: Socket | null = null;\n\nexport const initializeSocket = (): Socket | undefined => {\n  const token = Cookies.get('auth-token');\n  \n  if (!token) {\n    logger.error('[Socket]', 'No auth token found');\n    return;\n  }\n  \n  if (socket?.connected) {\n    logger.info('[Socket]', 'Already connected');\n    return;\n  }\n  \n  socket = io(process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000', {\n    auth: {\n      token\n    },\n    path: '/socket.io/',\n    transports: ['websocket', 'polling'],\n  });\n  \n  socket.on('connect', () => {\n    logger.info('[Socket]', 'Connected to server');\n  });\n  \n  socket.on('disconnect', () => {\n    logger.info('[Socket]', 'Disconnected from server');\n  });\n  \n  socket.on('connect_error', (error) => {\n    logger.error('[Socket]', `Connection error: ${error.message}`);\n  });\n  \n  return socket;\n};\n\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\n\nexport const getSocket = (): Socket | null => socket;\n\n// 예약 이벤트 리스너 등록\nexport const subscribeToBookingEvents = (callbacks: {\n  onCreate?: (data: any) => void;\n  onUpdate?: (data: any) => void;\n  onDelete?: (data: any) => void;\n  onBulkCreate?: (data: any) => void;\n  onBulkDelete?: (data: any) => void;\n}) => {\n  if (!socket) {\n    logger.error('[Socket]', 'Socket not initialized');\n    return;\n  }\n  \n  if (callbacks.onCreate) {\n    socket.on('booking:create', (data) => {\n      logger.info('[Socket]', `Received booking:create ${JSON.stringify(data)}`);\n      callbacks.onCreate!(data);\n    });\n  }\n  \n  if (callbacks.onUpdate) {\n    socket.on('booking:update', (data) => {\n      logger.info('[Socket]', `Received booking:update ${JSON.stringify(data)}`);\n      callbacks.onUpdate!(data);\n    });\n  }\n  \n  if (callbacks.onDelete) {\n    socket.on('booking:delete', (data) => {\n      logger.info('[Socket]', `Received booking:delete ${JSON.stringify(data)}`);\n      callbacks.onDelete!(data);\n    });\n  }\n  \n  if (callbacks.onBulkCreate) {\n    socket.on('booking:bulk-create', (data) => {\n      logger.info('[Socket]', `Received booking:bulk-create ${JSON.stringify(data)}`);\n      callbacks.onBulkCreate!(data);\n    });\n  }\n  \n  if (callbacks.onBulkDelete) {\n    socket.on('booking:bulk-delete', (data) => {\n      logger.info('[Socket]', `Received booking:bulk-delete ${JSON.stringify(data)}`);\n      callbacks.onBulkDelete!(data);\n    });\n  }\n};\n\n// 이벤트 리스너 해제\nexport const unsubscribeFromBookingEvents = () => {\n  if (!socket) return;\n  \n  socket.off('booking:create');\n  socket.off('booking:update');\n  socket.off('booking:delete');\n  socket.off('booking:bulk-create');\n  socket.off('booking:bulk-delete');\n};\n\n// 항공편 지연 이벤트 리스너 등록\nexport const subscribeToFlightDelays = (onDelay: (data: any) => void) => {\n  if (!socket) {\n    logger.error('[Socket]', 'Socket not initialized');\n    return;\n  }\n  \n  socket.on('delay', (data) => {\n    logger.info('[Socket]', `Received flight delay: ${JSON.stringify(data)}`);\n    onDelay(data);\n  });\n};\n\n// 항공편 감시 시작/중지\nexport const watchFlight = (flightNo: string) => {\n  if (!socket) {\n    logger.error('[Socket]', 'Socket not initialized');\n    return;\n  }\n  \n  socket.emit('watch:flight', flightNo);\n  logger.info('[Socket]', `Watching flight ${flightNo}`);\n};\n\nexport const unwatchFlight = (flightNo: string) => {\n  if (!socket) {\n    logger.error('[Socket]', 'Socket not initialized');\n    return;\n  }\n  \n  socket.emit('unwatch:flight', flightNo);\n  logger.info('[Socket]', `Unwatching flight ${flightNo}`);\n};\n\n// 항공편 지연 리스너 해제\nexport const unsubscribeFromFlightDelays = () => {\n  if (!socket) return;\n  socket.off('delay');\n};","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/lib/swr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/mocks/index.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[415,441],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/providers/QueryProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/providers/ToastProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/scripts/test-calendar-performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/utils/__tests__/dateHelpers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/utils/csv-import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/utils/dateHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/utils/export.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[268,271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[268,271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[302,305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[302,305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[874,877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[874,877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6209,6212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6209,6212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as XLSX from 'xlsx';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport { format } from 'date-fns';\nimport { ko } from 'date-fns/locale';\nimport { logger } from '@entrip/shared';\n\ndeclare module 'jspdf' {\n  interface jsPDF {\n    autoTable: (options: any) => jsPDF;\n    lastAutoTable: any;\n  }\n}\n\n// 회사 브랜드 색상\nconst BRAND_COLORS = {\n  primary: '#016B9F',\n  secondary: '#0084c7',\n  light: '#E8F4F8',\n  dark: '#014A70'\n};\n\nexport interface ExportBooking {\n  id: string;\n  bookingNumber: string;\n  customerName: string;\n  teamName: string;\n  destination: string;\n  departureDate: string;\n  returnDate: string;\n  numberOfPeople: number;\n  status: string;\n  revenue?: number;\n  coordinator?: string;\n}\n\nexport const exportToExcel = (bookings: ExportBooking[], _filename: string = 'bookings') => {\n  // 워크북 생성\n  const wb = XLSX.utils.book_new();\n  const ws_data: any[][] = [];\n  \n  // 회사 헤더 (병합 셀)\n  ws_data.push(['ENTRIP 예약 목록']);\n  ws_data.push([`생성일: ${format(new Date(), 'yyyy년 MM월 dd일', { locale: ko })}`]);\n  ws_data.push([]); // 빈 줄\n  \n  // 테이블 헤더\n  const headers = ['번호', '예약번호', '고객명', '팀명', '목적지', '출발일', '도착일', '인원', '상태', '매출', '담당자'];\n  ws_data.push(headers);\n  \n  // 데이터 행\n  bookings.forEach((booking, index) => {\n    ws_data.push([\n      index + 1,\n      booking.bookingNumber || `B2025-${String(index + 1).padStart(3, '0')}`,\n      booking.customerName,\n      booking.teamName || booking.customerName,\n      booking.destination,\n      format(new Date(booking.departureDate), 'yyyy-MM-dd'),\n      format(new Date(booking.returnDate), 'yyyy-MM-dd'),\n      booking.numberOfPeople,\n      booking.status === 'confirmed' ? '확정' : booking.status === 'cancelled' ? '취소' : '대기중',\n      booking.revenue || 0,\n      booking.coordinator || '미지정'\n    ]);\n  });\n  \n  // 요약 정보\n  ws_data.push([]); // 빈 줄\n  ws_data.push(['총 예약 건수:', bookings.length + '건']);\n  ws_data.push(['총 인원:', bookings.reduce((sum, b) => sum + b.numberOfPeople, 0) + '명']);\n  ws_data.push(['총 매출:', bookings.reduce((sum, b) => sum + (b.revenue || 0), 0).toLocaleString() + '원']);\n  \n  // 워크시트 생성\n  const ws = XLSX.utils.aoa_to_sheet(ws_data);\n  \n  // 병합 셀 설정\n  ws['!merges'] = [\n    { s: { r: 0, c: 0 }, e: { r: 0, c: 10 } }, // 제목 행\n    { s: { r: 1, c: 0 }, e: { r: 1, c: 10 } }, // 날짜 행\n  ];\n  \n  // 스타일 설정\n  const range = XLSX.utils.decode_range(ws['!ref'] || 'A1');\n  for (let R = 0; R <= range.e.r; ++R) {\n    for (let C = 0; C <= range.e.c; ++C) {\n      const cell_address = { c: C, r: R };\n      const cell_ref = XLSX.utils.encode_cell(cell_address);\n      \n      if (!ws[cell_ref]) continue;\n      \n      // 헤더 스타일\n      if (R === 0) {\n        ws[cell_ref].s = {\n          font: { bold: true, sz: 16, color: { rgb: \"016B9F\" } },\n          alignment: { horizontal: \"center\", vertical: \"center\" }\n        };\n      } else if (R === 3) { // 테이블 헤더\n        ws[cell_ref].s = {\n          font: { bold: true, color: { rgb: \"FFFFFF\" } },\n          fill: { fgColor: { rgb: \"016B9F\" } },\n          alignment: { horizontal: \"center\" }\n        };\n      }\n    }\n  }\n  \n  // 컬럼 너비 설정\n  ws['!cols'] = [\n    { wch: 5 },   // 번호\n    { wch: 12 },  // 예약번호\n    { wch: 15 },  // 고객명\n    { wch: 15 },  // 팀명\n    { wch: 15 },  // 목적지\n    { wch: 12 },  // 출발일\n    { wch: 12 },  // 도착일\n    { wch: 8 },   // 인원\n    { wch: 10 },  // 상태\n    { wch: 15 },  // 매출\n    { wch: 10 }   // 담당자\n  ];\n  \n  // 워크북에 시트 추가\n  XLSX.utils.book_append_sheet(wb, ws, '예약목록');\n  \n  // 파일 다운로드\n  const date = format(new Date(), 'yyyy-MM-dd');\n  const exportFilename = `Entrip_Bookings_${date}.xlsx`;\n  XLSX.writeFile(wb, exportFilename);\n  \n  logger.info('[Export]', `XLSX 생성 완료: ${exportFilename}`);\n  logger.info('[Export]', '셀 병합: A1:K1 (제목), A2:K2 (날짜)');\n  logger.info('[Export]', '브랜드 색상 적용: #016B9F');\n};\n\nexport const exportToPDF = (bookings: ExportBooking[], _filename: string = 'bookings') => {\n  const doc = new jsPDF('l', 'mm', 'a4'); // landscape orientation\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  \n  // 로고/헤더 영역\n  doc.setFillColor(parseInt(BRAND_COLORS.primary.slice(1, 3), 16), \n                   parseInt(BRAND_COLORS.primary.slice(3, 5), 16), \n                   parseInt(BRAND_COLORS.primary.slice(5, 7), 16));\n  doc.rect(0, 0, pageWidth, 25, 'F');\n  \n  // 회사명\n  doc.setFontSize(20);\n  doc.setTextColor(255, 255, 255);\n  doc.text('ENTRIP', pageWidth / 2, 10, { align: 'center' });\n  \n  // 제목\n  doc.setFontSize(14);\n  doc.text('Travel Booking Report', pageWidth / 2, 18, { align: 'center' });\n  \n  // 날짜 정보\n  const date = format(new Date(), 'yyyy년 MM월 dd일', { locale: ko });\n  doc.setFontSize(10);\n  doc.setTextColor(0, 0, 0);\n  doc.text(`생성일: ${date}`, 14, 35);\n  \n  // 테이블 데이터 준비\n  const tableData = bookings.map((booking, index) => [\n    index + 1,\n    booking.bookingNumber || `B2025-${String(index + 1).padStart(3, '0')}`,\n    booking.customerName,\n    booking.destination,\n    format(new Date(booking.departureDate), 'yyyy-MM-dd'),\n    format(new Date(booking.returnDate), 'yyyy-MM-dd'),\n    booking.numberOfPeople,\n    booking.status === 'confirmed' ? '확정' : booking.status === 'cancelled' ? '취소' : '대기중',\n    booking.revenue ? `${booking.revenue.toLocaleString()}원` : '-'\n  ]);\n\n  // 테이블 생성\n  doc.autoTable({\n    head: [['#', '예약번호', '고객명', '목적지', '출발일', '도착일', '인원', '상태', '매출']],\n    body: tableData,\n    startY: 40,\n    styles: {\n      font: 'helvetica',\n      fontSize: 10,\n      cellPadding: 3,\n      lineColor: [232, 244, 248],\n      lineWidth: 0.1,\n    },\n    headStyles: {\n      fillColor: [1, 107, 159], // Entrip brand color\n      textColor: 255,\n      fontStyle: 'bold',\n      halign: 'center',\n    },\n    alternateRowStyles: {\n      fillColor: [248, 252, 254],\n    },\n    columnStyles: {\n      0: { cellWidth: 10, halign: 'center' },  // #\n      1: { cellWidth: 30 },  // 예약번호\n      2: { cellWidth: 40 },  // 고객명\n      3: { cellWidth: 40 },  // 목적지\n      4: { cellWidth: 30, halign: 'center' },  // 출발일\n      5: { cellWidth: 30, halign: 'center' },  // 도착일\n      6: { cellWidth: 20, halign: 'center' },  // 인원\n      7: { cellWidth: 25, halign: 'center' },  // 상태\n      8: { cellWidth: 35, halign: 'right' },  // 매출\n    },\n    didDrawPage: function(data: any) {\n      // 푸터 추가\n      doc.setFontSize(8);\n      doc.setTextColor(128, 128, 128);\n      doc.text('Entrip Travel Management System', pageWidth / 2, pageHeight - 10, { align: 'center' });\n      doc.text(`Page ${data.pageCount}`, pageWidth - 20, pageHeight - 10);\n    }\n  });\n\n  // 요약 정보 박스\n  const finalY = doc.lastAutoTable.finalY || 40;\n  const summaryY = finalY + 15;\n  \n  // 요약 박스 배경\n  doc.setFillColor(248, 252, 254);\n  doc.rect(14, summaryY - 5, 100, 35, 'F');\n  \n  // 요약 정보\n  doc.setFontSize(11);\n  doc.setTextColor(0, 0, 0);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Summary', 16, summaryY);\n  \n  doc.setFont('helvetica', 'normal');\n  doc.setFontSize(10);\n  doc.text(`Total Bookings: ${bookings.length}`, 16, summaryY + 8);\n  \n  const totalPeople = bookings.reduce((sum, booking) => sum + booking.numberOfPeople, 0);\n  doc.text(`Total Guests: ${totalPeople}`, 16, summaryY + 16);\n  \n  const totalRevenue = bookings.reduce((sum, booking) => sum + (booking.revenue || 0), 0);\n  doc.text(`Total Revenue: ${totalRevenue.toLocaleString()} KRW`, 16, summaryY + 24);\n\n  // PDF 다운로드\n  const dateStr = format(new Date(), 'yyyy-MM-dd');\n  const exportFilename = `Entrip_Bookings_${dateStr}.pdf`;\n  doc.save(exportFilename);\n  \n  logger.info('[Export]', `PDF 생성 완료: ${exportFilename}`);\n  logger.info('[Export]', '로고 헤더 및 푸터 추가');\n  logger.info('[Export]', `브랜드 색상 적용: ${BRAND_COLORS.primary}`);\n};","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/utils/memory-profiler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1093,1096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1093,1096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3754,3757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3754,3757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4249,4252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4249,4252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4795,4798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4795,4798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4892,4895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4892,4895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@entrip/shared';\n\ninterface MemorySnapshot {\n  timestamp: number;\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n  delta?: number;\n}\n\nclass MemoryProfiler {\n  private snapshots: MemorySnapshot[] = [];\n  private isMonitoring = false;\n  private intervalId?: NodeJS.Timeout;\n\n  start() {\n    if (!('memory' in performance)) {\n      logger.warn('[MemoryProfiler]', 'Performance.memory API not available');\n      return;\n    }\n\n    logger.info('[MemoryProfiler]', 'Starting memory monitoring');\n    this.isMonitoring = true;\n    this.snapshots = [];\n\n    // Initial snapshot\n    this.takeSnapshot();\n\n    // Monitor every 2 seconds\n    this.intervalId = setInterval(() => {\n      if (this.isMonitoring) {\n        this.takeSnapshot();\n      }\n    }, 2000);\n  }\n\n  stop() {\n    logger.info('[MemoryProfiler]', 'Stopping memory monitoring');\n    this.isMonitoring = false;\n    \n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    return this.analyze();\n  }\n\n  private takeSnapshot() {\n    const memory = (performance as any).memory;\n    const snapshot: MemorySnapshot = {\n      timestamp: Date.now(),\n      usedJSHeapSize: memory.usedJSHeapSize,\n      totalJSHeapSize: memory.totalJSHeapSize,\n      jsHeapSizeLimit: memory.jsHeapSizeLimit\n    };\n\n    if (this.snapshots.length > 0) {\n      const lastSnapshot = this.snapshots[this.snapshots.length - 1];\n      snapshot.delta = snapshot.usedJSHeapSize - lastSnapshot.usedJSHeapSize;\n    }\n\n    this.snapshots.push(snapshot);\n\n    // Log if memory increased significantly\n    if (snapshot.delta && snapshot.delta > 1024 * 1024) { // 1MB increase\n      logger.warn('[MemoryProfiler]', `Memory increased by ${(snapshot.delta / 1024 / 1024).toFixed(2)}MB`);\n    }\n  }\n\n  private analyze() {\n    if (this.snapshots.length < 2) {\n      logger.info('[MemoryProfiler]', 'Not enough snapshots for analysis');\n      return null;\n    }\n\n    const firstSnapshot = this.snapshots[0];\n    const lastSnapshot = this.snapshots[this.snapshots.length - 1];\n    \n    const totalMemoryChange = lastSnapshot.usedJSHeapSize - firstSnapshot.usedJSHeapSize;\n    const percentageChange = (totalMemoryChange / firstSnapshot.usedJSHeapSize) * 100;\n    \n    const avgMemory = this.snapshots.reduce((sum, s) => sum + s.usedJSHeapSize, 0) / this.snapshots.length;\n    const maxMemory = Math.max(...this.snapshots.map(s => s.usedJSHeapSize));\n    const minMemory = Math.min(...this.snapshots.map(s => s.usedJSHeapSize));\n\n    const analysis = {\n      duration: lastSnapshot.timestamp - firstSnapshot.timestamp,\n      snapshots: this.snapshots.length,\n      initialMemory: firstSnapshot.usedJSHeapSize,\n      finalMemory: lastSnapshot.usedJSHeapSize,\n      totalChange: totalMemoryChange,\n      percentageChange,\n      avgMemory,\n      maxMemory,\n      minMemory,\n      memoryLeaks: this.detectLeaks()\n    };\n\n    logger.info('[MemoryProfiler]', 'Analysis complete:');\n    logger.info('[MemoryProfiler]', `- Duration: ${(analysis.duration / 1000).toFixed(1)}s`);\n    logger.info('[MemoryProfiler]', `- Initial memory: ${(analysis.initialMemory / 1024 / 1024).toFixed(2)}MB`);\n    logger.info('[MemoryProfiler]', `- Final memory: ${(analysis.finalMemory / 1024 / 1024).toFixed(2)}MB`);\n    logger.info('[MemoryProfiler]', `- Change: ${(analysis.totalChange / 1024 / 1024).toFixed(2)}MB (${analysis.percentageChange.toFixed(1)}%)`);\n    logger.info('[MemoryProfiler]', `- Average memory: ${(analysis.avgMemory / 1024 / 1024).toFixed(2)}MB`);\n    logger.info('[MemoryProfiler]', `- Memory leaks detected: ${analysis.memoryLeaks.length}`);\n\n    // Save to JSON file\n    this.saveResults(analysis);\n\n    return analysis;\n  }\n\n  private detectLeaks() {\n    const leaks: any[] = [];\n    const threshold = 500 * 1024; // 500KB continuous growth\n\n    for (let i = 1; i < this.snapshots.length; i++) {\n      const current = this.snapshots[i];\n      const _prev = this.snapshots[i - 1];\n      \n      if (current.delta && current.delta > threshold) {\n        leaks.push({\n          timestamp: current.timestamp,\n          size: current.delta,\n          totalMemory: current.usedJSHeapSize\n        });\n      }\n    }\n\n    return leaks;\n  }\n\n  private saveResults(analysis: any) {\n    const blob = new Blob([JSON.stringify({ analysis, snapshots: this.snapshots }, null, 2)], { \n      type: 'application/json' \n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `memory-profile-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    logger.info('[MemoryProfiler]', `Results saved to memory-profile-${Date.now()}.json`);\n  }\n\n  // Force garbage collection (only works with --expose-gc flag)\n  forceGC() {\n    if ((window as any).gc) {\n      logger.info('[MemoryProfiler]', 'Forcing garbage collection');\n      (window as any).gc();\n    } else {\n      logger.warn('[MemoryProfiler]', 'Garbage collection not available. Run Chrome with --js-flags=\"--expose-gc\"');\n    }\n  }\n}\n\nexport const memoryProfiler = new MemoryProfiler();","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/src/utils/profiler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/tests/delay-logo.spec.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1358,1429],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1734,1801],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2404,2471],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2476,2562],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3101,3141],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3722,3787],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3944,4024],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\ntest.describe('Flight Delay and Logo', () => {\n  test.beforeEach(async ({ page }) => {\n    // Login first\n    await page.goto('/login');\n    await page.fill('input[name=\"email\"]', 'admin@entrip.com');\n    await page.fill('input[name=\"password\"]', 'admin123');\n    await page.click('button[type=\"submit\"]');\n    await page.waitForURL('/bookings');\n  });\n\n  test('should show international flights when checkbox is checked', async ({ page }) => {\n    // Open flight modal\n    await page.locator('button[title=\"항공편 정보\"]').click();\n    await page.waitForSelector('h2:has-text(\"✈️ 항공편 정보\")');\n    \n    // Check international checkbox\n    const intlCheckbox = await page.locator('input[type=\"checkbox\"]');\n    await intlCheckbox.check();\n    \n    // Wait for international flights to load\n    await page.waitForTimeout(2000);\n    \n    // Check URL includes intl=true\n    const networkRequests = [];\n    page.on('request', request => {\n      if (request.url().includes('/api/flight/timetable')) {\n        networkRequests.push(request.url());\n      }\n    });\n    \n    // Trigger reload by changing airport\n    await page.selectOption('select', 'GMP');\n    await page.waitForTimeout(1000);\n    \n    const intlRequest = networkRequests.find(url => url.includes('intl=true'));\n    expect(intlRequest).toBeTruthy();\n    console.log('[Playwright] International flight request:', intlRequest);\n  });\n\n  test('should display airline logos or placeholder', async ({ page }) => {\n    // Open flight modal\n    await page.locator('button[title=\"항공편 정보\"]').click();\n    await page.waitForSelector('table');\n    \n    // Check for logo images\n    const logoImages = await page.locator('td img').all();\n    console.log(`[Playwright] Found ${logoImages.length} logo images`);\n    \n    // Check at least some logos exist\n    expect(logoImages.length).toBeGreaterThan(0);\n    \n    // Monitor console for logo load messages\n    const consoleMessages = [];\n    page.on('console', msg => {\n      if (msg.text().includes('[AirlineLogo]')) {\n        consoleMessages.push(msg.text());\n      }\n    });\n    \n    // Wait for logos to load\n    await page.waitForTimeout(2000);\n    \n    // Check console messages\n    const loadedLogos = consoleMessages.filter(msg => msg.includes('✔️ Loaded'));\n    const failedLogos = consoleMessages.filter(msg => msg.includes('Failed to load'));\n    \n    console.log(`[Playwright] ✔️ Loaded logos: ${loadedLogos.length}`);\n    console.log(`[Playwright] ⚪ Failed logos (using placeholder): ${failedLogos.length}`);\n    \n    // At least some logos should load or fail (proving the component works)\n    expect(loadedLogos.length + failedLogos.length).toBeGreaterThan(0);\n  });\n\n  test('should show delay toast notification', async ({ page }) => {\n    // Open flight modal\n    await page.locator('button[title=\"항공편 정보\"]').click();\n    await page.waitForSelector('table');\n    \n    // Monitor console for WebSocket messages\n    page.on('console', msg => {\n      if (msg.text().includes('[WS] emit delay') || msg.text().includes('[React] toast:')) {\n        console.log('[Playwright]', msg.text());\n      }\n    });\n    \n    // Simulate delay by mocking WebSocket event\n    await page.evaluate(() => {\n      // Trigger a fake delay event\n      const event = new CustomEvent('delay', {\n        detail: {\n          flightNo: 'OZ102',\n          delay: 45,\n          status: '지연',\n          airline: 'OZ'\n        }\n      });\n      window.dispatchEvent(event);\n    });\n    \n    // Check for toast\n    const toast = await page.locator('div:has-text(\"항공편 지연 알림\")');\n    const toastVisible = await toast.isVisible({ timeout: 5000 }).catch(() => false);\n    \n    if (toastVisible) {\n      console.log('[Playwright] ✓ Delay toast notification displayed');\n      const toastText = await toast.textContent();\n      expect(toastText).toContain('OZ102');\n      expect(toastText).toContain('45분');\n    } else {\n      console.log('[Playwright] Toast not visible (WebSocket not connected in test)');\n    }\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/tests/flight-modal.spec.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1106,1164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3593,3700],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4716,4821],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5300,5371],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5616,5680],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5946,6010],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6244,6305],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\ntest.describe('Flight Modal', () => {\n  test.beforeEach(async ({ page }) => {\n    // Login first\n    await page.goto('/login');\n    await page.fill('input[name=\"email\"]', 'admin@entrip.com');\n    await page.fill('input[name=\"password\"]', 'admin123');\n    await page.click('button[type=\"submit\"]');\n    await page.waitForURL('/bookings');\n  });\n\n  test('should open flight modal when airplane icon is clicked', async ({ page }) => {\n    // Find and click the airplane icon\n    const airplaneButton = await page.locator('button[title=\"항공편 정보\"]');\n    await expect(airplaneButton).toBeVisible();\n    await airplaneButton.click();\n    \n    // Check if modal is visible\n    await expect(page.locator('h2:has-text(\"✈️ 항공편 정보\")')).toBeVisible();\n    \n    // Check if airport selector is visible\n    await expect(page.locator('select')).toBeVisible();\n    \n    // Wait for flight table to load\n    await page.waitForSelector('table', { timeout: 10000 });\n    \n    // Count table rows (excluding header)\n    const rows = await page.locator('tbody tr').count();\n    console.log(`[Playwright] Flight table has ${rows} rows`);\n    \n    // Expect at least 20 rows\n    expect(rows).toBeGreaterThanOrEqual(20);\n    \n    // Check for required columns\n    await expect(page.locator('th:has-text(\"항공편\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"평균 지연\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"실시간 상태\")')).toBeVisible();\n    \n    // Close modal\n    await page.locator('button').filter({ has: page.locator('svg') }).first().click();\n    \n    // Verify modal is closed\n    await expect(page.locator('h2:has-text(\"✈️ 항공편 정보\")')).not.toBeVisible();\n  });\n\n  test('should change airport and update flight table', async ({ page }) => {\n    // Open modal\n    await page.locator('button[title=\"항공편 정보\"]').click();\n    await page.waitForSelector('h2:has-text(\"✈️ 항공편 정보\")');\n    \n    // Change airport\n    const select = await page.locator('select');\n    await select.selectOption('GMP');\n    \n    // Wait for table to update\n    await page.waitForTimeout(1000);\n    \n    // Check that departure column shows GMP\n    const departureCell = await page.locator('tbody tr:first-child td:nth-child(3)').textContent();\n    expect(departureCell).toBe('GMP');\n  });\n\n  test('should display real-time status colors', async ({ page }) => {\n    // Open modal\n    await page.locator('button[title=\"항공편 정보\"]').click();\n    await page.waitForSelector('table');\n    \n    // Check for status color classes\n    const statusCells = await page.locator('tbody tr td:nth-child(8)').all();\n    let hasColoredStatus = false;\n    \n    for (const cell of statusCells.slice(0, 10)) {\n      const className = await cell.getAttribute('class');\n      if (className && (className.includes('text-green') || className.includes('text-red') || className.includes('text-blue'))) {\n        hasColoredStatus = true;\n        break;\n      }\n    }\n    \n    expect(hasColoredStatus).toBe(true);\n  });\n\n  test('should show delayed and normal status in Korean', async ({ page }) => {\n    // Open modal\n    await page.locator('button[title=\"항공편 정보\"]').click();\n    await page.waitForSelector('table', { timeout: 10000 });\n    \n    // Wait for status data to load\n    await page.waitForTimeout(1000);\n    \n    // Check for Korean status text\n    const delayedCount = await page.locator('td:has-text(\"지연\")').count();\n    const normalCount = await page.locator('td:has-text(\"정상\")').count();\n    const boardingCount = await page.locator('td:has-text(\"탑승중\")').count();\n    \n    console.log(`[Playwright] Status counts - 지연: ${delayedCount}, 정상: ${normalCount}, 탑승중: ${boardingCount}`);\n    \n    // Expect at least one status to be shown\n    expect(delayedCount + normalCount + boardingCount).toBeGreaterThan(0);\n  });\n\n  test('should display delay times with color coding', async ({ page }) => {\n    // Open modal\n    await page.locator('button[title=\"항공편 정보\"]').click();\n    await page.waitForSelector('table');\n    \n    // Check delay column (7th column)\n    const delayCells = await page.locator('tbody tr td:nth-child(7)').all();\n    let hasRedDelay = false;\n    let hasGreenDelay = false;\n    \n    for (const cell of delayCells.slice(0, 10)) {\n      const text = await cell.textContent();\n      const className = await cell.getAttribute('class');\n      \n      if (text && text.includes('분')) {\n        const delayMinutes = parseInt(text.replace('분', ''));\n        if (delayMinutes >= 15 && className?.includes('text-red')) {\n          hasRedDelay = true;\n        } else if (delayMinutes < 5 && className?.includes('text-green')) {\n          hasGreenDelay = true;\n        }\n      }\n    }\n    \n    console.log(`[Playwright] Delay colors - Red (15+min): ${hasRedDelay}, Green (<5min): ${hasGreenDelay}`);\n    expect(hasRedDelay || hasGreenDelay).toBe(true);\n  });\n\n  test('should display real data with delay status and red color', async ({ page }) => {\n    // Open modal\n    await page.locator('button[title=\"항공편 정보\"]').click();\n    await page.waitForSelector('table', { timeout: 10000 });\n    \n    // Wait for data to load\n    await page.waitForTimeout(2000);\n    \n    // Check for rows with '지연' status\n    const delayedRows = await page.locator('tr:has-text(\"지연\")').count();\n    console.log(`[Playwright] Found ${delayedRows} rows with '지연' status`);\n    expect(delayedRows).toBeGreaterThan(0);\n    \n    // Check for red colored delay time (15+ minutes)\n    const delayCell = await page.locator('td:has-text(\"15\")').first();\n    const delayCellClass = await delayCell.getAttribute('class');\n    console.log(`[Playwright] Delay cell class: ${delayCellClass}`);\n    \n    // Check if it has red color\n    if (delayCellClass) {\n      expect(delayCellClass).toContain('text-red');\n    } else {\n      // Alternative: check computed style\n      const color = await delayCell.evaluate(el => window.getComputedStyle(el).color);\n      console.log(`[Playwright] Delay cell computed color: ${color}`);\n      expect(color).toContain('rgb(220'); // Red color\n    }\n    \n    // Verify data structure\n    const firstRow = await page.locator('tbody tr').first();\n    const flightNo = await firstRow.locator('td').first().textContent();\n    console.log(`[Playwright] First flight number: ${flightNo}`);\n    expect(flightNo).toMatch(/^[A-Z]{2}\\d+$/); // Format: XX1234\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/mnt/c/Users/PC/Documents/project/Entrip/apps/web/tests/mobile-calendar-performance.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1971,2037],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-const","severity":2,"message":"'startTime' is never reassigned. Use 'const' instead.","line":85,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":85,"endColumn":20,"fix":{"range":[2933,2967],"text":"const startTime = performance.now();"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4118,4189],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4555,4558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4555,4558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4831,4834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4831,4834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4861,4864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4861,4864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5098,5101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5098,5101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":167,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5250,5335],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6749,6794],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\nimport { format } from 'date-fns';\n\ntest.describe('Mobile Calendar Performance', () => {\n  test.use({\n    viewport: { width: 375, height: 812 }, // iPhone 12 viewport\n    deviceScaleFactor: 3,\n    hasTouch: true,\n    isMobile: true,\n  });\n\n  test.beforeEach(async ({ page }) => {\n    // Login first\n    await page.goto('/login');\n    await page.fill('input[name=\"email\"]', 'admin@entrip.com');\n    await page.fill('input[name=\"password\"]', 'admin123');\n    await page.click('button[type=\"submit\"]');\n    await page.waitForURL('/bookings');\n  });\n\n  test('calendar should achieve 60+ FPS on mobile', async ({ page }) => {\n    // Navigate to performance test page\n    await page.goto('/calendar-performance');\n    \n    // Wait for initial render\n    await page.waitForSelector('[data-testid=\"calendar-virtual\"]', { timeout: 10000 });\n    \n    // Start performance measurement\n    const performanceData = await page.evaluate(() => {\n      const marks: number[] = [];\n      let rafId: number;\n      let lastTime = performance.now();\n      \n      const measureFPS = () => {\n        const currentTime = performance.now();\n        const delta = currentTime - lastTime;\n        if (delta > 0) {\n          marks.push(1000 / delta); // Convert to FPS\n        }\n        lastTime = currentTime;\n        \n        if (marks.length < 100) {\n          rafId = requestAnimationFrame(measureFPS);\n        }\n      };\n      \n      rafId = requestAnimationFrame(measureFPS);\n      \n      return new Promise<{ avgFPS: number; minFPS: number; maxFPS: number }>((resolve) => {\n        setTimeout(() => {\n          cancelAnimationFrame(rafId);\n          \n          const avgFPS = marks.reduce((a, b) => a + b, 0) / marks.length;\n          const minFPS = Math.min(...marks);\n          const maxFPS = Math.max(...marks);\n          \n          resolve({ avgFPS, minFPS, maxFPS });\n        }, 3000); // Measure for 3 seconds\n      });\n    });\n    \n    console.log('[Mobile Performance] FPS Results:', performanceData);\n    \n    // Assert 60+ FPS average\n    expect(performanceData.avgFPS).toBeGreaterThan(60);\n    expect(performanceData.minFPS).toBeGreaterThan(30); // Minimum acceptable\n  });\n\n  test('calendar scrolling should be smooth on mobile', async ({ page }) => {\n    await page.goto('/calendar-performance');\n    await page.waitForSelector('[data-testid=\"calendar-virtual\"]');\n    \n    // Set 200 bookings for scroll test\n    await page.selectOption('select', '200');\n    await page.waitForTimeout(500);\n    \n    // Perform touch scroll and measure\n    const scrollPerformance = await page.evaluate(async () => {\n      const calendar = document.querySelector('[data-testid=\"calendar-virtual\"]');\n      if (!calendar) throw new Error('Calendar not found');\n      \n      const scrollContainer = calendar.querySelector('[data-testid=\"scroll-container\"]') || calendar;\n      \n      let frameCount = 0;\n      let startTime = performance.now();\n      \n      // Simulate touch scroll\n      const touchStart = new Touch({\n        identifier: Date.now(),\n        target: scrollContainer as Element,\n        clientX: 200,\n        clientY: 400,\n      });\n      \n      const touchEnd = new Touch({\n        identifier: Date.now(),\n        target: scrollContainer as Element,\n        clientX: 200,\n        clientY: 100,\n      });\n      \n      scrollContainer.dispatchEvent(new TouchEvent('touchstart', {\n        touches: [touchStart],\n        bubbles: true,\n      }));\n      \n      // Animate scroll\n      const animate = () => {\n        frameCount++;\n        if (frameCount < 30) {\n          requestAnimationFrame(animate);\n        }\n      };\n      requestAnimationFrame(animate);\n      \n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      scrollContainer.dispatchEvent(new TouchEvent('touchend', {\n        changedTouches: [touchEnd],\n        bubbles: true,\n      }));\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      const fps = (frameCount / duration) * 1000;\n      \n      return { fps, frameCount, duration };\n    });\n    \n    console.log('[Mobile Performance] Scroll FPS:', scrollPerformance.fps);\n    expect(scrollPerformance.fps).toBeGreaterThan(55);\n  });\n\n  test('memory usage should reduce by 30% with virtualization', async ({ page }) => {\n    await page.goto('/calendar-performance');\n    \n    // Measure memory with regular calendar\n    const initialMemory = await page.evaluate(() => {\n      if ('memory' in performance) {\n        return (performance as any).memory.usedJSHeapSize;\n      }\n      return 0;\n    });\n    \n    // Load 500 bookings\n    await page.selectOption('select', '500');\n    await page.waitForTimeout(2000);\n    \n    // Force garbage collection if available\n    await page.evaluate(() => {\n      if ((window as any).gc) {\n        (window as any).gc();\n      }\n    });\n    \n    await page.waitForTimeout(1000);\n    \n    // Measure memory after virtualization\n    const finalMemory = await page.evaluate(() => {\n      if ('memory' in performance) {\n        return (performance as any).memory.usedJSHeapSize;\n      }\n      return 0;\n    });\n    \n    const memoryReduction = ((initialMemory - finalMemory) / initialMemory) * 100;\n    console.log(`[Mobile Performance] Memory reduction: ${memoryReduction.toFixed(1)}%`);\n    \n    // Note: This test may need adjustment based on actual implementation\n    // For now, we'll check that memory doesn't increase significantly\n    expect(finalMemory).toBeLessThan(initialMemory * 1.5); // Max 50% increase allowed\n  });\n\n  test('should complete performance profiling session', async ({ page }) => {\n    await page.goto('/calendar-performance');\n    \n    // Start profiling\n    await page.click('button:has-text(\"Start Profiling\")');\n    \n    // Perform various interactions\n    await page.waitForTimeout(1000);\n    \n    // Click on some calendar days\n    const days = await page.$$('[data-testid=\"calendar-day\"]');\n    for (let i = 0; i < Math.min(5, days.length); i++) {\n      await days[i].click();\n      await page.waitForTimeout(200);\n    }\n    \n    // Scroll the calendar\n    await page.evaluate(() => {\n      const calendar = document.querySelector('[data-testid=\"calendar-virtual\"]');\n      if (calendar) {\n        calendar.scrollTop = 200;\n      }\n    });\n    \n    await page.waitForTimeout(1000);\n    \n    // Stop profiling\n    await page.click('button:has-text(\"Stop Profiling\")');\n    \n    // Check for results\n    await expect(page.locator('text=Performance Results:')).toBeVisible();\n    await expect(page.locator('text=Memory Results:')).toBeVisible();\n    \n    // Verify FPS is displayed\n    const fpsText = await page.locator('text=/FPS estimate: \\\\d+/').textContent();\n    console.log('[Mobile Performance]', fpsText);\n    \n    // Extract and verify FPS value\n    const fpsMatch = fpsText?.match(/FPS estimate: ([\\d.]+)/);\n    if (fpsMatch) {\n      const fps = parseFloat(fpsMatch[1]);\n      expect(fps).toBeGreaterThan(60);\n    }\n  });\n});","usedDeprecatedRules":[]}]
