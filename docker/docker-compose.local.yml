version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: entrip-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-entrip}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-entrip123}
      POSTGRES_DB: ${POSTGRES_DB:-entrip_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-entrip}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - entrip-network

  # API Service (Express + Prisma)
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    image: entrip-api:0.1.0-rc.1
    container_name: entrip-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-entrip}:${POSTGRES_PASSWORD:-entrip123}@db:5432/${POSTGRES_DB:-entrip_db}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
      PORT: 4000
      FRONT_URL: ${FRONT_URL:-http://localhost:3000}
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - entrip-network

  # Web Service (Next.js)
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile.web
    image: entrip-web:0.1.0-rc.1
    container_name: entrip-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:4000}
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - entrip-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.51.0
    container_name: entrip-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - entrip-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:11.0.0
    container_name: entrip-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-admin}
      GF_SERVER_HTTP_PORT: 3001
      GF_SERVER_ROOT_URL: http://localhost:3001
    ports:
      - "3001:3001"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - entrip-network

networks:
  entrip-network:
    driver: bridge

volumes:
  postgres_data:
    name: entrip_postgres_data
  prometheus_data:
    name: entrip_prometheus_data
  grafana_data:
    name: entrip_grafana_data